// This file is auto-generated by @hey-api/openapi-ts

export const AWSEventBridgeIntegrationSchema = {
    properties: {
        attributes: {
            properties: {
                'aws-account-id': {
                    description: 'The AWS account ID, 12 digits.',
                    maxLength: 12,
                    minLength: 12,
                    type: 'string',
                },
                'err-message': {
                    description: 'Message from service that points to nature of a problem',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'event-source': {
                    description: 'The name of the partner event source.',
                    readOnly: true,
                    type: 'string',
                },
                'event-source-arn': {
                    description: 'The ARN of the partner event source.',
                    readOnly: true,
                    type: 'string',
                },
                name: {
                    description: 'Connection name',
                    minLength: 1,
                    type: 'string',
                },
                region: {
                    description: 'The AWS region name.',
                    maxLength: 50,
                    minLength: 1,
                    type: 'string',
                },
                status: {
                    description: 'Status of integration.',
                    enum: ['active', 'disabled', 'failed', 'pending'],
                    type: 'string',
                },
            },
            required: ['name', 'aws-account-id', 'region'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this integration belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['aws-event-bridge-integrations'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const AWSEventBridgeIntegrationDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/AWSEventBridgeIntegration',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const AWSEventBridgeIntegrationListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/AWSEventBridgeIntegration',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const AccessPolicySchema = {
    description: `Grants the permissions declared in a role to a user, team, or service account.

An access policy is applied to an environment or a specific workspace.`,
    properties: {
        attributes: {
            properties: {
                'is-system': {
                    description: 'The access policy is a built-in read-only policy that cannot be updated or deleted.',
                    readOnly: true,
                    type: 'boolean',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'Grant access to the account and to all environments and workspaces in the account.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                environment: {
                    description: 'Grant access to the environment and all workspaces within it.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['environments'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                roles: {
                    description: 'The roles with permissions.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['roles'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'service-account': {
                    description: 'Role binding to a service account.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['service-accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                team: {
                    description: 'Role binding to a team.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['teams'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                user: {
                    description: 'Role binding to a user.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['users'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                workspace: {
                    description: 'Grant access to the workspace.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['workspaces'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            required: ['roles'],
            type: 'object',
        },
        type: {
            enum: ['access-policies'],
            type: 'string',
        },
    },
    required: ['type', 'relationships'],
    type: 'object',
} as const;

export const AccessPolicyDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/AccessPolicy',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const AccessPolicyListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/AccessPolicy',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const AccessTokenSchema = {
    description: 'Access Token for the Scalr API.',
    properties: {
        attributes: {
            properties: {
                'created-at': {
                    description: 'Date/Time the token was created.',
                    format: 'date-time',
                    readOnly: true,
                    type: 'string',
                },
                description: {
                    description: 'The description of the token.',
                    maxLength: 255,
                    nullable: true,
                    type: 'string',
                },
                'last-used-at': {
                    description: 'Date/Time when the token was last used.',
                    format: 'date-time',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                token: {
                    description: `The JWT token which an API client should pass in the \`Authorization: Bearer <token>\`
header. Available only in the [Create an Access Token](#create-an-access-token) response.`,
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                'created-by': {
                    description: 'The user who created the token.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['users'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['access-tokens'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const AccessTokenDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/AccessToken',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const AccessTokenListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/AccessToken',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const AccountSchema = {
    description: 'API Resource for the account.',
    properties: {
        attributes: {
            properties: {
                'allowed-ips': {
                    description: 'The list of allowed IP networks for IP fencing',
                    items: {
                        format: 'ipv4network',
                        type: 'string',
                    },
                    type: 'array',
                },
                'created-at': {
                    format: 'date-time',
                    readOnly: true,
                    type: 'string',
                },
                'last-login-attempt-at': {
                    deprecated: true,
                    format: 'date-time',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'login-attempts': {
                    deprecated: true,
                    nullable: true,
                    readOnly: true,
                    type: 'integer',
                },
                name: {
                    description: 'The name of the account',
                    maxLength: 255,
                    type: 'string',
                },
                quotas: {
                    description: "The list of account's quotas",
                    properties: {
                        agents: {
                            description: 'The maximal number of agents',
                            type: 'integer',
                        },
                        'before-after-hooks-available': {
                            description: 'Indicates if the before-after hooks are available for an account',
                            type: 'boolean',
                        },
                        'cost-estimate-available': {
                            description: 'Indicates if the cost estimation is available for an account',
                            type: 'boolean',
                        },
                        environments: {
                            description: 'The maximal number of environments',
                            type: 'integer',
                        },
                        'max-concurrent-runs': {
                            description: 'The maximal number of concurrent runs',
                            type: 'integer',
                        },
                        'policy-group-checks-available': {
                            description: 'Indicates if the policy group checks are available for an account',
                            type: 'boolean',
                        },
                        'policy-groups': {
                            description: 'The maximal number of policy groups',
                            type: 'integer',
                        },
                        'registry-modules': {
                            description: 'The maximal number of registry modules',
                            type: 'integer',
                        },
                        'registry-templates': {
                            description: 'The maximal number of registry templates',
                            type: 'integer',
                        },
                        'run-triggers': {
                            description: 'The maximal number of run triggers',
                            type: 'integer',
                        },
                        'service-accounts-available': {
                            description: 'Indicates if the service accounts are available for an account',
                            type: 'boolean',
                        },
                        'sso-available': {
                            description: 'Indicates if the SSO is available for an account',
                            type: 'boolean',
                        },
                        users: {
                            description: 'The maximal number of users',
                            type: 'integer',
                        },
                        'vcs-providers': {
                            description: 'The maximal number of VCS providers',
                            type: 'integer',
                        },
                        workspaces: {
                            description: 'The maximal number of workspaces',
                            type: 'integer',
                        },
                    },
                    type: 'object',
                },
                'support-access-enabled': {
                    default: true,
                    description:
                        'If enabled, Scalr support staff will be able to access the account for troubleshooting purposes.',
                    type: 'boolean',
                },
            },
            required: ['name'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                'billing-plan': {
                    description: 'The billing plan of this account',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['billing-plans'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'identity-provider': {
                    description: 'The identity provider of this account',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['identity-providers'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                owner: {
                    description: 'The user that owns this account',
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['users'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            required: ['owner'],
            type: 'object',
        },
        type: {
            enum: ['accounts'],
            type: 'string',
        },
    },
    required: ['type', 'attributes', 'relationships'],
    type: 'object',
} as const;

export const AccountBlobSettingsSchema = {
    description: `API resource describing the external blob storage setting, where
Scalr will store this account blobs: e.g. source code, terraform state, and logs.`,
    properties: {
        attributes: {
            properties: {
                'aws-s3-audience': {
                    description: 'The value of the aud claim for the identity token.',
                    maxLength: 255,
                    minLength: 1,
                    nullable: true,
                    type: 'string',
                },
                'aws-s3-bucket-name': {
                    description: 'AWS S3 Storage bucket name. Bucket must already exist.',
                    maxLength: 63,
                    minLength: 3,
                    nullable: true,
                    type: 'string',
                },
                'aws-s3-region': {
                    default: 'us-east-1',
                    description: 'AWS S3 bucket region.',
                    maxLength: 63,
                    minLength: 3,
                    type: 'string',
                },
                'aws-s3-role-arn': {
                    description: 'Amazon Resource Name (ARN) of the IAM Role to assume.',
                    maxLength: 2048,
                    minLength: 20,
                    nullable: true,
                    type: 'string',
                },
                'backend-type': {
                    default: 'google',
                    description: 'Type of backend',
                    enum: ['google', 'aws-s3'],
                    type: 'string',
                },
                'created-at': {
                    description: 'The resource creation timestamp.',
                    format: 'date-time',
                    readOnly: true,
                    type: 'string',
                },
                'error-message': {
                    description:
                        "This field contains the last error description, when these settings doesn't work properly.",
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'google-credentials': {
                    description: `Service Account JSON key.
Required IAM roles: \`Storage Admin\` assigned on a \`google-storage-bucket\` bucket.
See: [use IAM with bucket](https://cloud.google.com/storage/docs/access-control/using-iam-permissions#bucket-iam).`,
                    format: 'password',
                    nullable: true,
                    type: 'object',
                },
                'google-encryption-key': {
                    description: `Optional [customer supplied encryption key](https://cloud.google.com/storage/docs/encryption/customer-supplied-keys).
Must be exactly 32 bytes, encoded into base64:
\`\`\`sh
$ openssl rand 32 | base64
NfsPPHBVNlU8ZLBU9BeBIoL29rqtduyQAEw3vxf6kaY=
\`\`\``,
                    format: 'password',
                    nullable: true,
                    type: 'string',
                },
                'google-project': {
                    description: 'Google Cloud project ID.',
                    nullable: true,
                    type: 'string',
                },
                'google-storage-bucket': {
                    description: 'Google Storage bucket name. Bucket must already exist.',
                    maxLength: 222,
                    nullable: true,
                    type: 'string',
                },
                'updated-at': {
                    description: 'The resource last update timestamp.',
                    format: 'date-time',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        type: {
            enum: ['account-blob-settings'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const AccountBlobSettingsDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/AccountBlobSettings',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const AccountDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/Account',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const AccountListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/Account',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const AccountMetricsSchema = {
    description: 'Represents account metrics.',
    properties: {
        'billings-flex-runs-count': {
            type: 'integer',
        },
        'billings-flex-runs-minutes-count': {
            type: 'integer',
        },
        'billings-run-minutes-count': {
            type: 'integer',
        },
        'billings-runs-count': {
            type: 'integer',
        },
        'environments-count': {
            type: 'integer',
        },
        'quota-max-concurrency': {
            type: 'integer',
        },
        'runs-awaiting-confirmation': {
            type: 'integer',
        },
        'runs-concurrency': {
            type: 'integer',
        },
        'runs-count': {
            type: 'integer',
        },
        'runs-failed': {
            type: 'integer',
        },
        'runs-queue-size': {
            type: 'integer',
        },
        'runs-successful': {
            type: 'integer',
        },
        'workspaces-count': {
            type: 'integer',
        },
    },
    required: [
        'workspaces-count',
        'runs-count',
        'environments-count',
        'runs-awaiting-confirmation',
        'runs-failed',
        'runs-successful',
        'runs-concurrency',
    ],
    type: 'object',
} as const;

export const AccountUserSchema = {
    description: 'Represents an account-user relation.',
    properties: {
        attributes: {
            properties: {
                status: {
                    description: 'The relation status. Can be: `Active`, `Inactive`, `Pending`.',
                    enum: ['Active', 'Inactive', 'Pending'],
                    type: 'string',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                teams: {
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['teams'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                user: {
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['users'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['account-users'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const AccountUserDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/AccountUser',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const AccountUserListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/AccountUser',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const AgentSchema = {
    description: `An agent represents a single instance of self-hosted runner installed on a customer's on-prem
infrastructure.

An agent resource is automatically created when [self-hosted runner](../../agent_pools.html)
connects to the API server to join it [agent pool](agent-pools.html). In order to connect to the
pool, the runner requires an [agent pool token](access-tokens.html#create-an-agent-pool-access-token).`,
    properties: {
        attributes: {
            properties: {
                'created-at': {
                    description: 'The resource creation timestamp.',
                    format: 'date-time',
                    readOnly: true,
                    type: 'string',
                },
                'error-message': {
                    description: 'Contains the error message if the agent is in an `errored` status.',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'last-seen-at': {
                    description: 'The timestamp when the agent was last seen online.',
                    format: 'date-time',
                    readOnly: true,
                    type: 'string',
                },
                name: {
                    description: 'The name of the agent. This must be unique within the agent pool.',
                    maxLength: 64,
                    type: 'string',
                },
                os: {
                    description: "The agent's OS distribution name and version (ex: `centos_8`, `ubuntu_20`)",
                    maxLength: 64,
                    type: 'string',
                },
                status: {
                    description: `The agent's current status

* \`busy\` - The agent is working on a task.
* \`errored\` - The agent has an error and can't operate correctly.
The attribute \`error-message\` has the details.
* \`idle\` - The agent is idle and ready to start working on a task.
* \`offline\` - API server hasn't seen the agent's heartbeat for 30 seconds.`,
                    enum: ['idle', 'busy', 'offline', 'errored'],
                    readOnly: true,
                    type: 'string',
                },
                version: {
                    description: "The agent's version.",
                    readOnly: true,
                    type: 'string',
                },
            },
            required: ['name', 'os'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                pool: {
                    description: 'The agent pool this agent is a member of.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['agent-pools'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['agents'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const AgentDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/Agent',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const AgentListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/Agent',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const AgentPoolSchema = {
    description: `With the agent pool resource you can manage a pool of [self-hosted agents](../../agent_pools.html)

A workspace may be configured to use an agent pool to execute terraform [runs](runs.html).
Agents could be hosted on a physical or virtual machines within the customer's network.`,
    properties: {
        attributes: {
            properties: {
                name: {
                    description: `The name of the agent pool. This must be unique within a Scalr scope
(e.g. account or environment).`,
                    maxLength: 64,
                    type: 'string',
                },
                'vcs-enabled': {
                    default: false,
                    description: 'Indicates whether the VCS support is enabled for agents in the pool.',
                    type: 'boolean',
                },
            },
            required: ['name'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account the agent pool belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                agents: {
                    description: 'The list of agents connected to the pool.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['agents'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                environment: {
                    deprecated: true,
                    description: 'The environment the agent pool belongs to. This relationship is deprecated.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['environments'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                workspaces: {
                    description:
                        'The list of workspaces attached to the pool. Can be used to bulk link/unlink workspaces.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['workspaces'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['agent-pools'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const AgentPoolDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/AgentPool',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const AgentPoolListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/AgentPool',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ApplySchema = {
    description: `Applies are the details of a request to apply a Terraform plan.

An apply may or may not be successful as indicated by the \`status\` attribute.`,
    properties: {
        attributes: {
            properties: {
                'execution-details': {
                    additionalProperties: {
                        type: 'string',
                    },
                    description: 'Apply execution details.',
                    type: 'object',
                },
                'resource-additions': {
                    description: 'The number of resources added.',
                    nullable: true,
                    type: 'integer',
                },
                'resource-changes': {
                    description: 'The number of resources updated.',
                    nullable: true,
                    type: 'integer',
                },
                'resource-destructions': {
                    description: 'The number of resources destroyed.',
                    nullable: true,
                    type: 'integer',
                },
                status: {
                    description: `The Apply's current status.

Transient states:
* \`pending\` - Apply has been created but not yet \`queued\`.
* \`queued\` - Queued and waiting for capacity/and or quota to be available.
* \`running\` - Running.

Final states:
* \`canceled\` - Apply canceled in some way.
* \`errored\` - An error occurred during the apply. See \`output\` for details.
* \`finished\` - Apply completed successfully.
* \`unreachable\` - Apply will not be run.`,
                    enum: ['pending', 'queued', 'running', 'finished', 'canceled', 'errored', 'unreachable'],
                    type: 'string',
                },
                'status-timestamps': {
                    additionalProperties: {
                        format: 'date-time',
                        type: 'string',
                    },
                    description: 'Date/Time of transition to each status that has occurred.',
                    type: 'object',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                output: {
                    description: 'URL to download the apply output.',
                    nullable: true,
                    type: 'string',
                },
                self: {
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        type: {
            enum: ['applies'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const ApplyDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/Apply',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const BillingPlanSchema = {
    properties: {
        attributes: {
            properties: {
                amount: {
                    type: 'integer',
                },
                'included-runs': {
                    nullable: true,
                    type: 'integer',
                },
                'included-runs-minutes': {
                    nullable: true,
                    type: 'integer',
                },
                'plan-type': {
                    enum: ['monthly', 'yearly', 'deprecated-yearly'],
                    type: 'string',
                },
                prices: {
                    items: {
                        properties: {
                            amount: {
                                nullable: true,
                                type: 'integer',
                            },
                            currency: {
                                type: 'string',
                            },
                            interval: {
                                type: 'string',
                            },
                            type: {
                                enum: ['membership', 'pre-paid-runs', 'flex-runs', 'flex-runs-minutes'],
                                type: 'string',
                            },
                            'unit-label': {
                                nullable: true,
                                type: 'string',
                            },
                        },
                        required: ['currency', 'type', 'interval'],
                        type: 'object',
                    },
                    type: 'array',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                tier: {
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['billing-tiers'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['billing-plans'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const BillingPlanDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/BillingPlan',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const BuiltInProviderTypesSchema = {
    enum: ['aws', 'azurerm', 'google', 'scalr'],
    type: 'string',
} as const;

export const CommentSchema = {
    description: 'An optional explanation for why run action was done.',
    properties: {
        comment: {
            default: '',
            description: 'The reason.',
            type: 'string',
        },
    },
    type: 'object',
} as const;

export const ConfigurationVersionSchema = {
    description: `A Configuration Version describes the version of a Terraform configuration files.

Each run is associated with a configuration version. It provides details of the source of the configuration files,
the upload status, and the relationships to VCS and the workspace.`,
    properties: {
        attributes: {
            properties: {
                'auto-queue-runs': {
                    description:
                        'Indicates if a run should automatically be queued when the configuration has been uploaded.',
                    type: 'boolean',
                },
                'created-at': {
                    description: 'Date/Time the configuration version was created.',
                    format: 'date-time',
                    readOnly: true,
                    type: 'string',
                },
                'error-message': {
                    description: `This field contains the error description, when this configuration version's
status is \`errored\`.`,
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                inputs: {
                    default: [],
                    description: `The input variables definitions.

Example:
\`\`\`js
[
  {
    "description": "The name of the CloudSQL database.",
    "name": "cloudsql_database",
    "type": "string"
  },
  {"...": ""..."}
]
\`\`\``,
                    items: {
                        anyOf: [
                            {
                                $ref: '#/components/schemas/RegistryInputOptional',
                            },
                            {
                                $ref: '#/components/schemas/RegistryInputRequired',
                            },
                        ],
                    },
                    readOnly: true,
                    type: 'array',
                },
                'is-dry': {
                    description: `Indicates the configuration version can only be used to perform dry runs that comprise the plan,
cost estimation (if enabled) and policy checks.

With this set to \`true\` the configuration cannot be used for an apply and never requires confirmation.`,
                    type: 'boolean',
                },
                size: {
                    description: 'A blob size in bytes.',
                    nullable: true,
                    readOnly: true,
                    type: 'integer',
                },
                source: {
                    description: 'The origin for the configuration version.',
                    readOnly: true,
                    type: 'string',
                },
                status: {
                    description: `The Configuration version's current status.

* \`pending\` - waiting for the configuration files to upload.
* \`uploaded\` - upload successful. At this point if the \`auto-queue-runs: true\` the new run should be \`queued\`.
* \`errored\` - uploaded files post processing failed. Attribute \`error-message\` contains the details.`,
                    enum: ['errored', 'pending', 'uploaded'],
                    readOnly: true,
                    type: 'string',
                },
                'status-timestamps': {
                    additionalProperties: {
                        format: 'date-time',
                        type: 'string',
                    },
                    description: 'Date/Time of transition to each status that has occurred.',
                    readOnly: true,
                    type: 'object',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
                upload: {
                    description:
                        'URL for terraform configuration templates upload, that could be used to `PUT` a tar.gz archive of a local workspace directory. Available only in the create `configuration-versions` response.',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                'vcs-revision': {
                    description:
                        'When configuration version was uploaded from a VCS, this relation points to the Git commit information',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['vcs-revisions'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                workspace: {
                    description: 'The workspace the configuration version belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['workspaces'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['configuration-versions'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const ConfigurationVersionDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/ConfigurationVersion',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ConfigurationVersionListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/ConfigurationVersion',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ConfirmRequestSchema = {
    description: 'A request to confirm a run. Includes optional time when apply should be queued.',
    properties: {
        'apply-at': {
            description: 'The UTC datetime at which the Apply should be queued.',
            format: 'date-time',
            nullable: true,
            type: 'string',
        },
        comment: {
            default: '',
            description: 'The reason.',
            type: 'string',
        },
    },
    type: 'object',
} as const;

export const CostEstimateSchema = {
    description: `A Cost Estimate is the details of the cost estimation phase of a \`run\` in Scalr.

Cost estimation is optional and is enabled/disable per \`environment\`. If enabled a cost estimation
is performed immediately after Terraform plan has completed for every run in every workspace,
including dry runs.`,
    properties: {
        attributes: {
            properties: {
                'delta-monthly-cost': {
                    default: '0.000',
                    description: 'The change in the estimated cost ($) from the previous run (if any).',
                    type: 'string',
                },
                'error-message': {
                    description:
                        'When the cost estimate status is `errored`, this field contains the error description.',
                    nullable: true,
                    type: 'string',
                },
                'matched-resources-count': {
                    description: `The number of resources in the terraform plan, that were included into the estimation.

Cost estimation in Scalr supports a number of terraform resources from major
[cloud providers](https://docs.scalr.io/docs/cost-estimation)`,
                    nullable: true,
                    type: 'integer',
                },
                'prior-monthly-cost': {
                    default: '0.000',
                    description: 'The estimated current monthly cost ($).',
                    type: 'string',
                },
                'proposed-monthly-cost': {
                    default: '0.000',
                    description: 'The estimated monthly cost ($) if the plan is applied.',
                    type: 'string',
                },
                'resources-count': {
                    description: 'The total number of resources in the terraform plan.',
                    nullable: true,
                    type: 'integer',
                },
                status: {
                    description: `The Cost estimate's current status.

Transient states:
* \`pending\` - Cost estimation has been created but not yet \`queued\`.
* \`queued\` - Queued and waiting for capacity to be available.

Final states:
* \`canceled\` - The cost estimate has been canceled.
* \`errored\` - The cost estimate has finished with an error. Attribute \`error-message\` contains the details.
* \`finished\` - The cost estimate has completed successfully.
* \`unreachable\` - The cost estimate will not run.`,
                    enum: ['pending', 'queued', 'finished', 'canceled', 'errored', 'unreachable'],
                    type: 'string',
                },
                'status-timestamps': {
                    additionalProperties: {
                        format: 'date-time',
                        type: 'string',
                    },
                    description: 'Date/Time of transition to each status that has occurred.',
                    type: 'object',
                },
                'unmatched-resources-count': {
                    description:
                        'The number of resources in the terraform plan that were excluded from the estimation.',
                    nullable: true,
                    type: 'integer',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                breakdown: {
                    description:
                        'Link to download the cost breakdown [JSON formatted output](https://www.infracost.io/docs/multi_project/report/#examples).',
                    nullable: true,
                    type: 'string',
                },
                output: {
                    description: 'Link to download the raw output of the cost estimation.',
                    nullable: true,
                    type: 'string',
                },
                self: {
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        type: {
            enum: ['cost-estimates'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const CostEstimateDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/CostEstimate',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const CreateUserSchema = {
    description:
        'Represents a request to create an [IAM](https://docs.scalr.io/docs/identity-and-access-management) user.',
    properties: {
        attributes: {
            properties: {
                'change-password-on-sign-in': {
                    default: false,
                    description:
                        'If set to `true`, the user will be asked to change the temporary password on the first sign in.',
                    type: 'boolean',
                },
                'created-at': {
                    format: 'date-time',
                    nullable: true,
                    type: 'string',
                },
                email: {
                    maxLength: 255,
                    type: 'string',
                },
                'full-name': {
                    maxLength: 100,
                    nullable: true,
                    type: 'string',
                },
                password: {
                    description:
                        'Must be at least 8 characters long and contain at least one digit, one lowercase letter, one uppercase letter, and one special character.',
                    maxLength: 64,
                    type: 'string',
                },
                status: {
                    description:
                        'User status. Can be: `Active`, `Inactive`, `Pending`. Pending user will be activated after the first sign in.',
                    enum: ['Active', 'Inactive', 'Pending'],
                    type: 'string',
                },
            },
            required: ['email'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                'identity-providers': {
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['identity-providers'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['users'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const CreateUserDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/CreateUser',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const DatadogIntegrationSchema = {
    properties: {
        attributes: {
            properties: {
                'api-key': {
                    description: 'The API key.',
                    maxLength: 255,
                    minLength: 1,
                    nullable: true,
                    type: 'string',
                },
                'deployment-url': {
                    description: 'HTTP(s) URL.',
                    maxLength: 255,
                    nullable: true,
                    type: 'string',
                },
                'err-message': {
                    description: 'Message from service that points to nature of a problem',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                name: {
                    description: 'Name of Datadog integration',
                    type: 'string',
                },
                status: {
                    description: 'Status of integration.',
                    enum: ['active', 'disabled', 'failed'],
                    type: 'string',
                },
            },
            required: ['name', 'api-key'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this integration belongs to.',
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            required: ['account'],
            type: 'object',
        },
        type: {
            enum: ['datadog-integrations'],
            type: 'string',
        },
    },
    required: ['type', 'attributes', 'relationships'],
    type: 'object',
} as const;

export const DatadogIntegrationDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/DatadogIntegration',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const DatadogIntegrationListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/DatadogIntegration',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const EnvironmentSchema = {
    description: `Environments are collections of related workspaces that correspond to functional areas, SDLC stages,
projects or any grouping that is required.

An account can have multiple environments.

Workspaces within an environment are where Terraform configurations are run to deploy infrastructure,
and where state files are stored.

An Environment can have set of policy groups assigned that are applied to all workspaces in the environment.
The Environment can also have variables, credentials, registry modules, and VCS providers
that are available to every workspace.`,
    properties: {
        attributes: {
            properties: {
                'cost-estimation-enabled': {
                    default: true,
                    description: 'Indicates if the cost estimation should be performed for `runs` in the environment.',
                    type: 'boolean',
                },
                'created-at': {
                    description: 'Date/Time the environment was created.',
                    format: 'date-time',
                    readOnly: true,
                    type: 'string',
                },
                'created-by-email': {
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                name: {
                    description: 'The name of the environment.',
                    maxLength: 255,
                    type: 'string',
                },
                permissions: {
                    readOnly: true,
                    type: 'object',
                },
                status: {
                    readOnly: true,
                    type: 'string',
                },
            },
            required: ['name'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account that owns this environment.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'created-by': {
                    description: 'The user that created the environment.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['users'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'default-provider-configurations': {
                    description: 'Provider configurations used in the environment workspaces by default.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['provider-configurations'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'policy-groups': {
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['policy-groups'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'provider-configurations': {
                    description: 'Provider configurations available for this environment.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['provider-configurations'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                tags: {
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['tags'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['environments'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const EnvironmentDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/Environment',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const EnvironmentListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/Environment',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ErrorSchema = {
    description: `JSON:API Error object.

see: https://jsonapi.org/format/#errors`,
    properties: {
        code: {
            nullable: true,
            type: 'string',
        },
        detail: {
            nullable: true,
            type: 'string',
        },
        meta: {
            nullable: true,
            type: 'object',
        },
        source: {
            nullable: true,
            properties: {
                pointer: {
                    type: 'string',
                },
            },
            type: 'object',
        },
        status: {
            nullable: true,
            type: 'string',
        },
    },
    type: 'object',
} as const;

export const ErrorDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        errors: {
            items: {
                $ref: '#/components/schemas/Error',
            },
            type: 'array',
        },
    },
    type: 'object',
} as const;

export const EventDefinitionSchema = {
    description: `Represents a Webhook Event Definition.

Use [List Event Definitions](event-definitions.html#list-event-definitions) to obtain
the all Scalr events available for use in webhooks. Then pass a number of the event IDs
within \`webhook.event\` relationship in [Create Webook](webhooks.html#create-webhook) or
[Update Webhook](webhooks.html#update-webhook).`,
    properties: {
        attributes: {
            properties: {
                description: {
                    description: 'The event details.',
                    nullable: true,
                    type: 'string',
                },
                name: {
                    description: 'The name of the event.',
                    maxLength: 64,
                    type: 'string',
                },
            },
            required: ['name'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        type: {
            enum: ['event-definitions'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const EventDefinitionDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/EventDefinition',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const EventDefinitionListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/EventDefinition',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const IdentityProviderSchema = {
    description: 'The Identity Provider (IdP).',
    properties: {
        attributes: {
            properties: {
                'idp-type': {
                    description: 'The IdP type. Can be one of `scalr`, `ldap`, or `saml`.',
                    enum: ['scalr', 'ldap', 'saml'],
                    type: 'string',
                },
                name: {
                    description: 'The IdP name.',
                    maxLength: 255,
                    type: 'string',
                },
                'verification-status': {
                    description: 'Represents the verification status with the external IdP (SAML/LDAP only)',
                    enum: ['pending', 'success', 'running'],
                    type: 'string',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this IdP belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['identity-providers'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const IdentityProviderDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/IdentityProvider',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ModuleSchema = {
    description: 'A terraform module in the [Private Module Registry](../../module.html).',
    properties: {
        attributes: {
            properties: {
                'created-at': {
                    description: 'The resource creation timestamp.',
                    format: 'date-time',
                    readOnly: true,
                    type: 'string',
                },
                description: {
                    description: `The description of the module.

By default, this is taken from the VCS repository description. For mono repos you likely
want to override this behavior by passing this argument in a
[Create Module](modules.html#create-a-module) operation.`,
                    readOnly: true,
                    type: 'string',
                },
                'error-message': {
                    description: "This field contains the error description, when this module's status is `errored`.",
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                name: {
                    description: 'The module name.',
                    readOnly: true,
                    type: 'string',
                },
                provider: {
                    description: `A name of a system, this module was written for.

For multi-cloud modules this argument should match terraform provider name (ex: \`aws\` or
\`google\`), in other cases the convention is to name it \`system\``,
                    readOnly: true,
                    type: 'string',
                },
                source: {
                    default: '',
                    description: 'The `source` by which the module should be addressed from a HCL template.',
                    readOnly: true,
                    type: 'string',
                },
                status: {
                    description: `The Module's current status.

Initial status:
* \`pending\` -  The initial status of a module once it has been created. Now Scalr will
download the code from the VCS, and create a \`module-version\` resource for each matching
Git tag.

Ending statuses:
* \`no_version_tags\` - a Module has been created, however the Module source repository
has no tags.
* \`setup_complete\` - a Module has been created, and at least one ModuleVersion has been
successfully uploaded. Scalr assigns this status while some module-versions upload might
be still in-progress. If you want to ensure a specific version was uploaded, you can poll
[List Module Versions](module-versions.html#list-module-versions) for the \`ok\` status.
* \`errored\` - Module has been created, however its synchronization has failed. Attribute
\`error-message\` contains the details.`,
                    enum: ['no_version_tags', 'pending', 'setup_complete', 'errored'],
                    readOnly: true,
                    type: 'string',
                },
                'vcs-repo': {
                    properties: {
                        identifier: {
                            description: `A reference to the module's VCS repository.

For GitHub, GitHub Enterprise and GitLab the format is \`<org>/<repo>\`.
Azure DevOps Services has the format \`<org>/<project>/<repo>\`.`,
                            type: 'string',
                        },
                        path: {
                            description: `The repository sub-directory where the module source is located.
If omitted or submitted as an empty string, this defaults to the repository's root.`,
                            maxLength: 255,
                            type: 'string',
                        },
                        'tag-prefix': {
                            description: `Specify this attribute when a module's releases are namespaced within a repository's
Git tags. This is usually the case for a mono repos with individually versioned
components. For example if your module is tagged \`my-module/v1.0.0\` it's \`tag_prefix\`
is  \`my-module/\`.`,
                            maxLength: 255,
                            type: 'string',
                        },
                    },
                    required: ['identifier'],
                    type: 'object',
                },
            },
            required: ['vcs-repo'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this module belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'created-by': {
                    description: 'The user who has created the module.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['users'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                environment: {
                    description: 'The environment this module belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['environments'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'latest-module-version': {
                    description: "The module's latest version.",
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['module-versions'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'module-version': {
                    description: "The module's latest successful version.",
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['module-versions'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'module-versions': {
                    description: 'The IDs of the module versions.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['module-versions'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'vcs-provider': {
                    description: "The module's VCS provider.",
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['vcs-providers'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            required: ['vcs-provider'],
            type: 'object',
        },
        type: {
            enum: ['modules'],
            type: 'string',
        },
    },
    required: ['type', 'attributes', 'relationships'],
    type: 'object',
} as const;

export const ModuleDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/Module',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ModuleListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/Module',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ModuleResyncRequestSchema = {
    description: 'Represents a request to resync the object.',
    properties: {
        force: {
            default: false,
            description: `Force resync module. If not equal to "true", only versions that did not exist before
will be synchronized.`,
            type: 'boolean',
        },
    },
    type: 'object',
} as const;

export const ModuleUsageNamespaceSchema = {
    description: 'Represents terraform module usage namespace instance.',
    properties: {
        attributes: {
            properties: {
                'namespace-name': {
                    description: 'Name of the namespace',
                    maxLength: 255,
                    type: 'string',
                },
                source: {
                    maxLength: 255,
                    type: 'string',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this usage instance belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'namespace-account': {
                    description: 'Filled when namespace is a scalr account',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'namespace-environment': {
                    description: 'Namespace of module the Scalr module.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['environments'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['tf-module-namespaces'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const ModuleUsageNamespaceDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/ModuleUsageNamespace',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ModuleUsageNamespaceListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/ModuleUsageNamespace',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ModuleVersionSchema = {
    description: "A terraform module's version in the [Private Module Registry](../../module.html).",
    properties: {
        attributes: {
            properties: {
                'created-at': {
                    description: 'The resource creation timestamp.',
                    format: 'date-time',
                    readOnly: true,
                    type: 'string',
                },
                dependencies: {
                    additionalProperties: {
                        anyOf: [
                            {
                                type: 'string',
                            },
                            {
                                type: 'object',
                            },
                            {
                                items: {},
                                type: 'array',
                            },
                        ],
                    },
                    description: 'The list of modules this version depends on.',
                    nullable: true,
                    readOnly: true,
                    type: 'object',
                },
                details: {
                    description: `README contents.

This file should be named README or README.md. The latter will be processed as
[CommonMark](https://commonmark.org/).`,
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'error-message': {
                    description: `This field contains the error description, when this module version's status is
\`errored\`.`,
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                inputs: {
                    description: 'Input Variables.',
                    items: {
                        anyOf: [
                            {
                                $ref: '#/components/schemas/RegistryInputOptional',
                            },
                            {
                                $ref: '#/components/schemas/RegistryInputRequired',
                            },
                        ],
                    },
                    nullable: true,
                    readOnly: true,
                    type: 'array',
                },
                'is-root-module': {
                    description: `Module version marked as root will allow the
[creation of workspaces](../../module.html#deployable-modules) directly from the
registry, as well as standard module usage.`,
                    readOnly: true,
                    type: 'boolean',
                },
                outputs: {
                    description: 'Output Values.',
                    items: {
                        properties: {
                            description: {
                                default: '',
                                type: 'string',
                            },
                            name: {
                                default: '',
                                type: 'string',
                            },
                            sensitive: {
                                default: false,
                                type: 'boolean',
                            },
                            value: {
                                anyOf: [
                                    {
                                        type: 'string',
                                    },
                                    {
                                        type: 'object',
                                    },
                                    {
                                        items: {},
                                        type: 'array',
                                    },
                                ],
                                default: '',
                                nullable: true,
                            },
                        },
                        type: 'object',
                    },
                    nullable: true,
                    readOnly: true,
                    type: 'array',
                },
                resources: {
                    description: 'Declared resources.',
                    items: {
                        properties: {
                            address: {
                                default: '',
                                type: 'string',
                            },
                            type: {
                                default: '',
                                type: 'string',
                            },
                        },
                        type: 'object',
                    },
                    nullable: true,
                    readOnly: true,
                    type: 'array',
                },
                size: {
                    description: 'A blob size in bytes.',
                    nullable: true,
                    readOnly: true,
                    type: 'integer',
                },
                status: {
                    description: `The module version's current status.

Initial status:
* \`not_uploaded\` - Module version has been created, however the code has not been
uploaded.

Transitional statuses:
* \`pending\` - Module version has been created and is currently synchronizing.
* \`pending_delete\` - Module version has been deleted from the repository and pending
deletion from the registry.

Ending statuses:
* \`ok\` - Module version has been created and the code has been uploaded.
* \`errored\` - Module version has been created, however its synchronization has failed.
Attribute \`error-message\` contains the details.`,
                    enum: ['not_uploaded', 'pending', 'ok', 'errored', 'pending_delete'],
                    readOnly: true,
                    type: 'string',
                },
                version: {
                    description: 'Semantic Version.',
                    maxLength: 64,
                    type: 'string',
                },
            },
            required: ['version'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                download: {
                    description: 'The URL to download the tar.gz archive with module version source code.',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                module: {
                    description: 'The module this version belongs to.',
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['modules'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'vcs-revision': {
                    description: 'The Git commit information when the module version was uploaded from a VCS.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['vcs-revisions'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
            },
            required: ['module'],
            type: 'object',
        },
        type: {
            enum: ['module-versions'],
            type: 'string',
        },
    },
    required: ['type', 'attributes', 'relationships'],
    type: 'object',
} as const;

export const ModuleVersionDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/ModuleVersion',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ModuleVersionListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/ModuleVersion',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const PermissionSchema = {
    description: `The ability to perform an action on an object, enabling the corresponding functionality
in the UI and API. e.g. \`workspaces:create\`, \`vcs-providers:read\`.

The ID of a permission consist of two parts separated with \`:\` (colon):
 * Resource type in a plural form.
 * Action name. Generally the actions are CRUD, but some objects have specific actions, such as \`runs:cancel\`.

If an \`*\` (asterisk) is used instead of the action name in the permission it means the permission allows all actions
for the specified resource type. For example \`workspaces:*\` allows all actions with workspaces.

An asterisk can be also used instead of the resource type. For example permission \`*:read\` gives read access to all resources.

\`*:*\` - gives access to everything.

Use [List Permissions](permissions.html#list-permissions) to obtain all possible permissions.`,
    properties: {
        attributes: {
            properties: {
                'applicable-scopes': {
                    description:
                        'Scope identities, this permission could be applied to in an [access policy](access-policies.html).',
                    items: {
                        enum: ['account', 'environment', 'workspace'],
                        type: 'string',
                    },
                    type: 'array',
                },
                description: {
                    description: 'Permission description.',
                    nullable: true,
                    type: 'string',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        type: {
            enum: ['permissions'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const PermissionDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/Permission',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const PermissionListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/Permission',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const PlanSchema = {
    description: 'Provides details of a Terraform plan operation.',
    properties: {
        attributes: {
            properties: {
                'execution-details': {
                    additionalProperties: {
                        type: 'string',
                    },
                    description: 'Plan execution details.',
                    type: 'object',
                },
                'has-changes': {
                    description: 'Indicates if plan has proposed resource changes.',
                    type: 'boolean',
                },
                'resource-additions': {
                    description: 'The number of new resources that will be added.',
                    nullable: true,
                    type: 'integer',
                },
                'resource-changes': {
                    description: 'The number of resources that will be updated in place.',
                    nullable: true,
                    type: 'integer',
                },
                'resource-destructions': {
                    description: 'The number of resources that will be destroyed.',
                    nullable: true,
                    type: 'integer',
                },
                status: {
                    description: `The Plan's current status.

Transient states:
* \`pending\` - Plan has been created but not yet queued.
* \`queued\` - Queued and waiting for capacity/and or quota to be available.
* \`running\` - Running.

Final states:
* \`canceled\` - Plan canceled in some way.
* \`errored\` - An error occurred during the plan. See \`output\` for details.
* \`finished\` - Plan completed successfully.
* \`unreachable\` - Plan will not be run.`,
                    enum: ['pending', 'queued', 'running', 'finished', 'canceled', 'errored', 'unreachable'],
                    type: 'string',
                },
                'status-timestamps': {
                    additionalProperties: {
                        format: 'date-time',
                        type: 'string',
                    },
                    description: 'Date/Time of transition to each status that has occurred.',
                    type: 'object',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                'json-output': {
                    description: 'URL to retrieve the JSON execution plan',
                    nullable: true,
                    type: 'string',
                },
                output: {
                    description: 'Link to download the raw output of the terraform plan.',
                    nullable: true,
                    type: 'string',
                },
                self: {
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        type: {
            enum: ['plans'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const PlanDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/Plan',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const PolicySchema = {
    description: `A policy provides details of a single OPA policy
as declared in [scalr-policy.hcl](../../opa.html#creating-policy-groups).`,
    properties: {
        attributes: {
            properties: {
                enabled: {
                    default: true,
                    description: 'If set to `false`, the policy will not be evaluated during a run.',
                    readOnly: true,
                    type: 'boolean',
                },
                'enforced-level': {
                    description: `The policy's enforcement level.

* \`hard-mandatory\` - cannot be overridden.
* \`soft-mandatory\` - can be overridden through an approval by account admins
and other authorized roles.
* \`advisory\` - provides a warning only.`,
                    enum: ['hard-mandatory', 'soft-mandatory', 'advisory'],
                    readOnly: true,
                    type: 'string',
                },
                name: {
                    description: 'The name of the policy.',
                    type: 'string',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                'policy-group': {
                    description: 'The policy group this policy belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['policy-groups'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['policies'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const PolicyCheckSchema = {
    description: `A policy check contains the details of the policy check phase of a run in Scalr.

Policy check is performed immediately after Terraform plan and cost estimation have completed for every run
in every workspace, including dry runs, where policies have been linked.`,
    properties: {
        attributes: {
            properties: {
                permissions: {
                    type: 'object',
                },
                result: {
                    description: 'OPA policy decision.',
                    properties: {
                        'advisory-failed': {
                            default: 0,
                            description: "Number of policy checks that have failed with 'advisory' level.",
                            type: 'integer',
                        },
                        'duration-ms': {
                            default: 0,
                            description: 'Duration of the policy check operation.',
                            type: 'integer',
                        },
                        'hard-failed': {
                            default: 0,
                            description: 'Number of policy checks that have failed with "hard-mandatory" level.',
                            type: 'integer',
                        },
                        passed: {
                            default: 0,
                            description: 'Number of policy checks that have passed.',
                            type: 'integer',
                        },
                        policies: {
                            default: [],
                            description: 'List of policies that were checked.',
                            items: {
                                properties: {
                                    messages: {
                                        default: [],
                                        items: {
                                            type: 'string',
                                        },
                                        type: 'array',
                                    },
                                    name: {
                                        type: 'string',
                                    },
                                    result: {
                                        enum: ['passed', 'hard_failed', 'soft_failed', 'advisory_failed'],
                                        type: 'string',
                                    },
                                },
                                required: ['name', 'result'],
                                type: 'object',
                            },
                            type: 'array',
                        },
                        result: {
                            default: false,
                            description: 'Indicates whether all policy checks have passed without failures.',
                            type: 'boolean',
                        },
                        'soft-failed': {
                            default: 0,
                            description: 'Number of policy checks that have failed with "soft-mandatory" level.',
                            type: 'integer',
                        },
                        'total-failed': {
                            default: 0,
                            description: 'Total number of policy checks that have failed.',
                            type: 'integer',
                        },
                    },
                    type: 'object',
                },
                status: {
                    description: `The Policy checks's current status.

Transient states:
* \`pending\` - The initial status of a policy check once it has been created.
* \`queued\` - The policy check has been queued, awaiting backend service capacity to run terraform.
* \`running\` - The policy check is running.
* \`soft_failed\` Policy check has finished, and run hasn't passed policy with the \`soft\` level.
  User having \`policy-checks:override\` permission can overide the policy check decision,
  and push this run next to apply.

Final states:
* \`canceled\` - The policy check has been canceled.
* \`errored\` - The policy check has finished with an error. Attribute \`error-message\` contains the details.
* \`hard_failed\` - Run hasn't passed policy with the \`hard\` level.
* \`overridden\` - The policy check \`soft_failed\` status has been overriden.
* \`passed\` - Run has successfully passed all configured policies.
* \`unreachable\` - The policy check will not run.`,
                    enum: [
                        'pending',
                        'queued',
                        'passed',
                        'errored',
                        'hard_failed',
                        'soft_failed',
                        'overridden',
                        'unreachable',
                        'canceled',
                    ],
                    type: 'string',
                },
                'status-timestamps': {
                    additionalProperties: {
                        format: 'date-time',
                        type: 'string',
                    },
                    description: 'Date/Time of transition to each status that has occurred.',
                    type: 'object',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                output: {
                    description: 'Link to download the policy check raw output.',
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        type: {
            enum: ['policy-checks'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const PolicyCheckDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/PolicyCheck',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const PolicyCheckListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/PolicyCheck',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const PolicyCheckResultSchema = {
    description: 'Represents a terraform policy check result.',
    properties: {
        attributes: {
            properties: {
                messages: {
                    description: 'The messages returned by the policy check.',
                    items: {
                        type: 'string',
                    },
                    type: 'array',
                },
                name: {
                    description: 'The name of the policy.',
                    maxLength: 100,
                    type: 'string',
                },
                'pull-request-number': {
                    description: 'The number of the pull request that triggered the policy check.',
                    nullable: true,
                    type: 'string',
                },
                'pull-request-title': {
                    description: 'The title of the pull request that triggered the policy check.',
                    maxLength: 512,
                    nullable: true,
                    type: 'string',
                },
                result: {
                    description: 'The result of the policy check.',
                    enum: ['passed', 'hard_failed', 'soft_failed', 'advisory_failed'],
                    type: 'string',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                environment: {
                    description: 'The environment associated with this policy check result.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['environments'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'policy-check': {
                    description: 'The policy check this result belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['policy-checks'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                run: {
                    description: 'The run associated with this policy check result.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['runs'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                workspace: {
                    description: 'The workspace associated with this policy check result.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['workspaces'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['policy-check-results'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const PolicyCheckResultListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/PolicyCheckResult',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const PolicyDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/Policy',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const PolicyGroupSchema = {
    description: `A policy group represents the collection of [OPA](../../opa.html) policies stored in a VCS
repository.

When [linked to an environment](environments.html#update-environment),
the policy group will participate in the policy check phase of every run in that environment.`,
    properties: {
        attributes: {
            properties: {
                'created-at': {
                    description: 'Date/Time the policy group was created.',
                    format: 'date-time',
                    readOnly: true,
                    type: 'string',
                },
                'error-message': {
                    description: "This field contains the error description when the group's status is `errored`.",
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'is-enforced': {
                    default: false,
                    description: 'Indicates whether the policy group is enforced in all environments.',
                    type: 'boolean',
                },
                name: {
                    description:
                        'The policy group name must be unique within the account and contain only letters, numbers, dashes',
                    maxLength: 100,
                    type: 'string',
                },
                'opa-version': {
                    description: `The version of Open Policy Agent to use for the policy evaluation.

If omitted, the system default version is assigned.`,
                    type: 'string',
                },
                status: {
                    description: `Policy group current status.

* \`fetching\` - waiting for policies to be synchronized with VCS.
* \`active\` - synchronization completed, policy group is ready.
* \`errored\` - synchronization has failed. Attribute \`error-message\` contains the details.`,
                    enum: ['fetching', 'active', 'errored'],
                    readOnly: true,
                    type: 'string',
                },
                'vcs-repo': {
                    properties: {
                        branch: {
                            description: `Branch of a repository the policy group is associated with.
If omitted, the repository default branch will be used.`,
                            nullable: true,
                            type: 'string',
                        },
                        identifier: {
                            description: `A reference to your VCS repository.

For GitHub, GitHub Enterprise and GitLab the format is \`<org>/<repo>\`.
For Azure DevOps Services the format is \`<org>/<project>/<repo>\`.`,
                            type: 'string',
                        },
                        path: {
                            default: '',
                            description: `The sub-directory of the VCS repository where OPA policies are stored.
The \`scalr-policy.hcl\` file must exist in this directory.
Files and directories outside this directory will be ignored during a sync from VCS,
and changing them won't trigger a policy group update.

If omitted or submitted as an empty string, this defaults to the repository's root.`,
                            nullable: true,
                            type: 'string',
                        },
                    },
                    required: ['identifier'],
                    type: 'object',
                },
            },
            required: ['name', 'vcs-repo'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this policy group belongs to.',
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                environments: {
                    description: 'List of environments this policy group is linked to.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['environments'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                policies: {
                    description: 'List of OPA policies this group contains.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['policies'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'vcs-provider': {
                    description: "The policy group's VCS provider.",
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['vcs-providers'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'vcs-revision': {
                    description: 'The Git commit information when the policy group was fetched from VCS.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['vcs-revisions'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
            },
            required: ['vcs-provider', 'account'],
            type: 'object',
        },
        type: {
            enum: ['policy-groups'],
            type: 'string',
        },
    },
    required: ['type', 'attributes', 'relationships'],
    type: 'object',
} as const;

export const PolicyGroupDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/PolicyGroup',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const PolicyGroupEnvironmentRelationshipSchema = {
    properties: {
        id: {
            type: 'string',
        },
        type: {
            enum: ['environments'],
            type: 'string',
        },
    },
    required: ['id', 'type'],
    type: 'object',
} as const;

export const PolicyGroupEnvironmentRelationshipFieldsetsListingDocumentSchema = {
    description: 'Document Listing.',
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/PolicyGroupEnvironmentRelationship',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const PolicyGroupListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/PolicyGroup',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ProviderConfigurationSchema = {
    description:
        'The configuration of provider. Provider configuration is managed on the account scope and can be linked to environments or workspaces.',
    properties: {
        attributes: {
            properties: {
                'aws-access-key': {
                    description: 'AWS access key. This option is required with the `access_keys` credential type.',
                    nullable: true,
                    type: 'string',
                },
                'aws-account-type': {
                    description: 'The type of AWS account, available options: `regular`, `gov-cloud`, `cn-cloud`.',
                    enum: ['regular', 'gov-cloud', 'cn-cloud'],
                    nullable: true,
                    type: 'string',
                },
                'aws-audience': {
                    description: 'The value of the aud claim for the identity token.',
                    minLength: 1,
                    nullable: true,
                    type: 'string',
                },
                'aws-credentials-type': {
                    description:
                        'The type of AWS credential, available options: `access_keys`, `role_delegation`, `oidc`.',
                    enum: ['role_delegation', 'access_keys', 'oidc'],
                    nullable: true,
                    type: 'string',
                },
                'aws-external-id': {
                    description:
                        'External identifier to use when assuming the role. This option is required with the `role_delegation` credential type.',
                    minLength: 2,
                    nullable: true,
                    type: 'string',
                },
                'aws-role-arn': {
                    description:
                        'Amazon Resource Name (ARN) of the IAM Role to assume. This option is required with the `role_delegation` and `oidc` credential type.',
                    minLength: 20,
                    nullable: true,
                    type: 'string',
                },
                'aws-secret-key': {
                    description: 'AWS secret key. This option is required with the `access_keys` credential type.',
                    format: 'password',
                    nullable: true,
                    type: 'string',
                },
                'aws-trusted-entity-type': {
                    description:
                        'Trusted entity type, available options: `aws_account`, `aws_service`. This option is required with the `role_delegation` credential type.',
                    enum: ['aws_account', 'aws_service'],
                    nullable: true,
                    type: 'string',
                },
                'azurerm-audience': {
                    description: 'The value of the aud claim for the identity token.',
                    maxLength: 600,
                    nullable: true,
                    type: 'string',
                },
                'azurerm-auth-type': {
                    description: 'The type of azurerm credentials, available options: `client-secrets`, `oidc`.',
                    enum: ['client-secrets', 'oidc'],
                    nullable: true,
                    type: 'string',
                },
                'azurerm-client-id': {
                    description: 'The Client ID which should be used.',
                    nullable: true,
                    type: 'string',
                },
                'azurerm-client-secret': {
                    description: 'The Client Secret which should be used.',
                    format: 'password',
                    nullable: true,
                    type: 'string',
                },
                'azurerm-subscription-id': {
                    description: 'The Subscription ID which should be used.',
                    nullable: true,
                    type: 'string',
                },
                'azurerm-tenant-id': {
                    description: 'The Tenant ID should be used.',
                    nullable: true,
                    type: 'string',
                },
                'error-message': {
                    description: 'Contains the error message if the provider configuration is in an `errored` status.',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'export-shell-variables': {
                    default: false,
                    description:
                        'Export provider variables into the run environment. This option is available only for built in providers.',
                    type: 'boolean',
                },
                'google-auth-type': {
                    description: 'Authentication type to access GCP.',
                    enum: ['service-account-key', 'oidc'],
                    nullable: true,
                    type: 'string',
                },
                'google-credentials': {
                    description: 'Service account key file in JSON format.',
                    format: 'password',
                    nullable: true,
                    type: 'string',
                },
                'google-project': {
                    description:
                        'The default project to manage resources in. If another project is specified on a resource, it will take precedence.',
                    nullable: true,
                    type: 'string',
                },
                'google-service-account-email': {
                    description: 'The service account email Scalr will use when authenticating to GCP.',
                    nullable: true,
                    type: 'string',
                },
                'google-service-account-name': {
                    description: 'Service account name.',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'google-use-default-project': {
                    default: true,
                    description: 'If the project will be enforced.',
                    nullable: true,
                    type: 'boolean',
                },
                'google-workload-provider-name': {
                    description: 'The canonical name of the workload identity provider.',
                    nullable: true,
                    type: 'string',
                },
                'is-custom': {
                    description:
                        'Determines if a provider configuration is custom. Note: custom provider configurations do not support built-in features like exporting as shell variables or on-save validation. Provider configuration will be validated during the run only.',
                    nullable: true,
                    type: 'boolean',
                },
                'is-shared': {
                    description:
                        'Indicates whether the provider configuration can be used in any workspace of the account without directly linking it to the environment.',
                    type: 'boolean',
                },
                name: {
                    description: 'The name of a Scalr provider configuration. This field is unique for the account.',
                    maxLength: 255,
                    type: 'string',
                },
                'provider-name': {
                    anyOf: [
                        {
                            $ref: '#/components/schemas/BuiltInProviderTypes',
                        },
                        {
                            type: 'string',
                        },
                    ],
                    description: 'The name of a Terraform provider.',
                },
                'scalr-hostname': {
                    description: 'The Scalr hostname which should be used.',
                    nullable: true,
                    type: 'string',
                },
                'scalr-token': {
                    description: 'The Scalr token which should be used.',
                    format: 'password',
                    nullable: true,
                    type: 'string',
                },
                status: {
                    description: 'Provider configuration status. Can be: `active`, `errored`.',
                    enum: ['active', 'errored'],
                    readOnly: true,
                    type: 'string',
                },
            },
            required: ['name', 'provider-name'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this provider configuration belongs to.',
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                environments: {
                    description:
                        'The list of environments attached to the provider configuration. Can be used to bulk link/unlink environments.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['environments'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                owners: {
                    description: 'The teams, the provider configuration belongs to.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['teams'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                parameters: {
                    description: 'The list of arguments for provider configurations.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['provider-configuration-parameters'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
            },
            required: ['account'],
            type: 'object',
        },
        type: {
            enum: ['provider-configurations'],
            type: 'string',
        },
    },
    required: ['type', 'attributes', 'relationships'],
    type: 'object',
} as const;

export const ProviderConfigurationDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/ProviderConfiguration',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ProviderConfigurationLinkSchema = {
    description: 'The provider configuration link attaches the provider configuration to an environment or workspace.',
    properties: {
        attributes: {
            properties: {
                alias: {
                    description:
                        'Is used only for the workspace links. Meta-argument for using the same provider with different configurations for different resources.',
                    maxLength: 255,
                    nullable: true,
                    type: 'string',
                },
                default: {
                    default: false,
                    description:
                        'Is used only for the environment links. Indicates whether the provider configuration must be used in every environment workspace during runs without direct linking. This behaviour can be changed in specific workspace by creating direct workspace link without alias.',
                    readOnly: true,
                    type: 'boolean',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                environment: {
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['environments'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'provider-configuration': {
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['provider-configurations'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                workspace: {
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['workspaces'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
            },
            required: ['provider-configuration'],
            type: 'object',
        },
        type: {
            enum: ['provider-configuration-links'],
            type: 'string',
        },
    },
    required: ['type', 'relationships'],
    type: 'object',
} as const;

export const ProviderConfigurationLinkDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/ProviderConfigurationLink',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ProviderConfigurationLinkListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/ProviderConfigurationLink',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ProviderConfigurationListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/ProviderConfiguration',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ProviderConfigurationParameterSchema = {
    description: 'The argument of the provider configuration.',
    properties: {
        attributes: {
            properties: {
                description: {
                    description: 'Variable description.',
                    maxLength: 512,
                    nullable: true,
                    type: 'string',
                },
                key: {
                    description: 'Parameter name.',
                    maxLength: 128,
                    type: 'string',
                },
                sensitive: {
                    default: false,
                    description:
                        'Indicates whether the value is sensitive. When set to `true` then the parameter is not visible after being written.',
                    type: 'boolean',
                },
                value: {
                    default: '',
                    description: 'Parameter value. Not visible if sensitive: true is enabled',
                    nullable: true,
                    type: 'string',
                },
            },
            required: ['key'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                'provider-configuration': {
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['provider-configurations'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['provider-configuration-parameters'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const ProviderConfigurationParameterDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/ProviderConfigurationParameter',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ProviderConfigurationParameterListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/ProviderConfigurationParameter',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ReasonSchema = {
    properties: {
        reason: {
            default: '',
            description: 'The reason for locking the workspace.',
            type: 'string',
        },
    },
    type: 'object',
} as const;

export const RegistryInputOptionalSchema = {
    properties: {
        default: {
            anyOf: [
                {
                    type: 'boolean',
                },
                {
                    type: 'integer',
                },
                {
                    type: 'number',
                },
                {
                    type: 'string',
                },
                {
                    items: {},
                    type: 'array',
                },
                {
                    type: 'object',
                },
            ],
            nullable: true,
        },
        description: {
            nullable: true,
            type: 'string',
        },
        name: {
            type: 'string',
        },
        sensitive: {
            default: false,
            type: 'boolean',
        },
        type: {
            nullable: true,
            type: 'string',
        },
    },
    required: ['default', 'name'],
    type: 'object',
} as const;

export const RegistryInputRequiredSchema = {
    properties: {
        description: {
            nullable: true,
            type: 'string',
        },
        name: {
            type: 'string',
        },
        sensitive: {
            default: false,
            type: 'boolean',
        },
        type: {
            nullable: true,
            type: 'string',
        },
    },
    required: ['name'],
    type: 'object',
} as const;

export const RemoteStateConsumerRelationshipSchema = {
    description: "Represents remote state consumers' relationship.",
    properties: {
        id: {
            type: 'string',
        },
        type: {
            enum: ['workspaces'],
            type: 'string',
        },
    },
    required: ['type', 'id'],
    type: 'object',
} as const;

export const RemoteStateConsumerRelationshipFieldsetsListingDocumentSchema = {
    description: 'Document Listing.',
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/RemoteStateConsumerRelationship',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const RoleSchema = {
    description:
        'A collection of permissions that can be assigned to a user, team, or service account via an [access policy](access-policies.html).',
    properties: {
        attributes: {
            properties: {
                description: {
                    description: 'The description of the role.',
                    maxLength: 255,
                    nullable: true,
                    type: 'string',
                },
                'is-system': {
                    description: 'When `true` the role is built-in, and cannot be modified or deleted.',
                    readOnly: true,
                    type: 'boolean',
                },
                name: {
                    description: 'The name of the role.',
                    maxLength: 128,
                    type: 'string',
                },
            },
            required: ['name'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this role belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                permissions: {
                    description: 'The collection of [permissions](permissions.html)',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['permissions'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['roles'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const RoleDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/Role',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const RoleListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/Role',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const RunSchema = {
    description: `A Run provides details of an entire run operation potentially comprising \`plan\`, \`cost-estimation\`,
\`policy-check\` and \`apply\`.`,
    properties: {
        attributes: {
            properties: {
                'apply-at': {
                    description: 'The UTC datetime at which the Apply should be queued.',
                    format: 'date-time',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'auto-apply': {
                    description: `Indicates whether \`terraform apply\` should automatically run
when terraform plan ends without error.
Defaults to the current Auto Apply setting in the workspace.`,
                    type: 'boolean',
                },
                'created-at': {
                    description: 'The resource creation timestamp.',
                    format: 'date-time',
                    readOnly: true,
                    type: 'string',
                },
                'error-message': {
                    description: 'Contains error message, when the run has finished in `errored` status.',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'has-changes': {
                    description: 'Specifies whether the plan has proposed resource changes.',
                    readOnly: true,
                    type: 'boolean',
                },
                'iac-platform': {
                    default: 'terraform',
                    description: 'The IaC platform for the run.',
                    enum: ['terraform', 'opentofu'],
                    readOnly: true,
                    type: 'string',
                },
                inputs: {
                    description: 'Terraform input variables that were passed into the workspace.',
                    items: {
                        properties: {
                            description: {
                                type: 'string',
                            },
                            name: {
                                type: 'string',
                            },
                            sensitive: {
                                type: 'boolean',
                            },
                            value: {
                                anyOf: [
                                    {
                                        type: 'boolean',
                                    },
                                    {
                                        type: 'integer',
                                    },
                                    {
                                        type: 'number',
                                    },
                                    {
                                        type: 'string',
                                    },
                                    {
                                        items: {},
                                        type: 'array',
                                    },
                                    {
                                        type: 'object',
                                    },
                                ],
                                nullable: true,
                            },
                        },
                        type: 'object',
                    },
                    nullable: true,
                    type: 'array',
                },
                'is-destroy': {
                    description: `Indicates if this run is a destroy that will destroy all provisioned infrastructure
in the current state.`,
                    type: 'boolean',
                },
                'is-dry': {
                    type: 'boolean',
                },
                message: {
                    description: 'Specifies the explanation message to associate with the run.',
                    maxLength: 512,
                    nullable: true,
                    type: 'string',
                },
                permissions: {
                    readOnly: true,
                    type: 'object',
                },
                'plan-at': {
                    description: 'The UTC datetime at which the Plan should be queued.',
                    format: 'date-time',
                    nullable: true,
                    type: 'string',
                },
                'position-in-queue': {
                    nullable: true,
                    readOnly: true,
                    type: 'integer',
                },
                refresh: {
                    description: 'Specifies whether or not to refresh the state before a plan.',
                    nullable: true,
                    type: 'boolean',
                },
                'refresh-only': {
                    description: 'Specifies whether this run should use the refresh-only plan mode.',
                    nullable: true,
                    type: 'boolean',
                },
                'replace-addrs': {
                    description:
                        "Specifies an optional list of resource addresses to force replacement of a particular resource. If the plan would've normally produced an update or no-op action for this instance, Terraform will plan to replace it instead.",
                    items: {
                        maxLength: 262143,
                        type: 'string',
                    },
                    nullable: true,
                    type: 'array',
                },
                source: {
                    anyOf: [
                        {
                            $ref: '#/components/schemas/Sources',
                        },
                        {
                            type: 'string',
                        },
                    ],
                    description: 'The origin of the run.',
                },
                status: {
                    description: `The Run's current status.

Initial status:
* \`pending\` -  The initial status of a run once it has been created. Scalr processes each workspace's
runs in the order they were queued, and a run remains pending until every run before it has completed.
The exception are Runs having \`is-dry: true\`. Such runs don't modify a workspace's state, and could
run in a parallel until the account's runs quota limit.

Plan stage:
* \`plan_queued\` - The plan is queued and waiting for capacity/and or quota to be available.
* \`planning\` - Scalr is currently running \`terraform plan\`.
* \`planned\` - \`terraform plan\` has finished. If the run's  workspace has \`auto-apply: false\`,
Scalr pauses the run in this state, awaiting confirmation.
* \`confirmed\` - Run has been confirmed to apply.

Cost estimate stage (optional):
* \`cost_estimating\` - Scalr is currently calculating the cost estimate for the plan.
* \`cost_estimated\` - The cost estimation stage has finished.

Policy check stage (optional):
* \`policy_checking\` - Scalr is currently checking the plan against the environment's policies.
* \`policy_checked\` -  The policy check succeeded, and Policy Engine will allow an apply to proceed.
Scalr sometimes pauses in this state, depending on workspace settings.
* \`policy_override\` - The policy check finished, but at least one \`soft-mandatory\` policy failed, so an
apply cannot proceed without approval from a user having \`policy-checks:override\` permission.
The run pauses in this state.

Apply stage:
* \`apply_queued\` -  The apply is queued and waiting for capacity/and or quota to be available.
* \`applying\` - Scalr is currently running \`terraform apply\`.
* \`applied\` - Scalr has successfully finished applying.

Ending statuses:
* \`planned_and_finished\` - Dry run's pipeline of Plan -> CostEstimate -> PolicyCheck stages have finished.
This is the final state for dry run.
* \`errored\` - The run has finished with an error. The attribute \`error-message\` has the details.
* \`discarded\` - A user chose not to continue this run from a confirmation state
* \`canceled\` -  A user interrupted the run from any active stage.`,
                    enum: [
                        'pending',
                        'plan_queued',
                        'planning',
                        'planned',
                        'planned_and_finished',
                        'confirmed',
                        'cost_estimating',
                        'cost_estimated',
                        'policy_checking',
                        'policy_override',
                        'policy_checked',
                        'apply_queued',
                        'applying',
                        'applied',
                        'errored',
                        'discarded',
                        'canceled',
                    ],
                    readOnly: true,
                    type: 'string',
                },
                'status-timestamps': {
                    additionalProperties: {
                        format: 'date-time',
                        type: 'string',
                    },
                    description: 'Timestamps of transition to prior and current statuses.',
                    readOnly: true,
                    type: 'object',
                },
                'target-addrs': {
                    description:
                        'If non-empty, requests that Terraform should create a plan including actions only for the given objects (specified using resource address syntax) and the objects they depend on.',
                    items: {
                        maxLength: 262143,
                        type: 'string',
                    },
                    nullable: true,
                    type: 'array',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                apply: {
                    description: 'Terraform apply phase.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['applies'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'configuration-version': {
                    description: "The Run's configuration version.",
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['configuration-versions'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'cost-estimate': {
                    description: 'Cost estimation phase.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['cost-estimates'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'created-by': {
                    description: 'User that has triggered the run.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['users'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'created-by-run': {
                    description: 'Upstream Run that has triggered this run.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['runs'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                environment: {
                    description: 'The environment this run Run belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['environments'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                plan: {
                    description: 'Terraform plan phase.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['plans'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'policy-checks': {
                    description: 'Policy check phase.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['policy-checks'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'state-versions': {
                    description: "The run's state versions.",
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['state-versions'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'status-transitions': {
                    description: 'Date/Time of transition to each status that has occurred.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['status-transitions'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                tags: {
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['tags'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'vcs-revision': {
                    description:
                        "Relation to the Git commit information, when the run's `configuration-version` source is `vcs`",
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['vcs-revisions'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                workspace: {
                    description: 'The workspace this Run belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['workspaces'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['runs'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const RunDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/Run',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const RunListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/Run',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const RunScheduleRuleSchema = {
    description: `A RunScheduleRule resource represents a rule for scheduling runs in a workspace.

Each RunScheduleRule is associated with a workspace and has a schedule and a schedule mode.
The schedule is a cron expression that determines when runs should be triggered.
The schedule mode determines whether the triggered run is an 'apply' 'destroy' or 'refresh' run.`,
    properties: {
        attributes: {
            properties: {
                schedule: {
                    description: 'Cron expression for scheduled runs. Time should be in UTC.',
                    maxLength: 255,
                    type: 'string',
                },
                'schedule-mode': {
                    description: 'Mode of the scheduled run.',
                    enum: ['apply', 'destroy', 'refresh'],
                    type: 'string',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                workspace: {
                    description: 'Workspace in which new runs will be created.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['workspaces'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['run-schedule-rules'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const RunScheduleRuleDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/RunScheduleRule',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const RunScheduleRuleListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/RunScheduleRule',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const RunTriggerSchema = {
    description: `Run triggers allow runs to queue automatically in downstream workspace on
successful apply of runs in any of the upstream workspaces.`,
    properties: {
        attributes: {
            properties: {
                'created-at': {
                    description: 'The resource creation timestamp.',
                    format: 'date-time',
                    readOnly: true,
                    type: 'string',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                downstream: {
                    description: 'Downstream workspace in which new runs will be created.',
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['workspaces'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                upstream: {
                    description: 'Upstream workspace to track new runs.',
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['workspaces'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            required: ['upstream', 'downstream'],
            type: 'object',
        },
        type: {
            enum: ['run-triggers'],
            type: 'string',
        },
    },
    required: ['type', 'relationships'],
    type: 'object',
} as const;

export const RunTriggerDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/RunTrigger',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const SamlIntegrationSchema = {
    properties: {
        attributes: {
            properties: {
                'auto-redirect': {
                    description: "If enabled, user will be redirected to IdP's login page.",
                    nullable: true,
                    type: 'boolean',
                },
                'base-url': {
                    description:
                        'Base URL to construct SAML endpoints from. It needs to be a URL with the protocol, server, port and context path.',
                    nullable: true,
                    type: 'string',
                },
                debug: {
                    default: false,
                    description: 'Enables debug mode.',
                    type: 'boolean',
                },
                'error-message': {
                    description: 'A message from an IdP that indicates a nature of the problem',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'idp-cert-fingerprint': {
                    description:
                        "Instead of using the whole x509cert you can use a fingerprint in order to validate the SAMLResponse, but we don't recommend to use this method on production since is exploitable by collision attack.",
                    nullable: true,
                    type: 'string',
                },
                'idp-cert-fingerprint-algorithm': {
                    default: 'sha256',
                    description: 'IDP cert fingerprint algorithm',
                    type: 'string',
                },
                'idp-entity-id': {
                    description: 'Identifier of the IdP entity (must be a URI).',
                    type: 'string',
                },
                'idp-single-logout-service-binding': {
                    description:
                        'SAML protocol binding to be used when returning the response message (urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect).',
                    nullable: true,
                    type: 'string',
                },
                'idp-single-logout-service-response-url': {
                    description: 'URL location of IdP where SLO Response will be sent.',
                    nullable: true,
                    type: 'string',
                },
                'idp-single-logout-service-url': {
                    description: 'URL target of IdP where Scalr will send the SLO Request.',
                    nullable: true,
                    type: 'string',
                },
                'idp-single-sign-on-service-binding': {
                    description:
                        'SAML protocol binding to be used when returning the response message (urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect).',
                    nullable: true,
                    type: 'string',
                },
                'idp-single-sign-on-service-url': {
                    description: 'URL target of IdP where Scalr will send the Authentication Request Message.',
                    type: 'string',
                },
                'idp-x509cert': {
                    description: 'Public x509 certificate of the IdP.',
                    nullable: true,
                    type: 'string',
                },
                'idp-x509cert-multi-encryption': {
                    description: 'IDP x509cert multi encryption',
                    nullable: true,
                    type: 'string',
                },
                'idp-x509cert-multi-signing': {
                    description:
                        "In some scenarios IdP uses different certificates for signing/encryption, or is under key rollover phase and more than one certificate is published on IdP metadata. (when used, 'IdP x509cert' and 'IdP Cert Fingerprint' values are ignored)",
                    nullable: true,
                    type: 'string',
                },
                'is-used': {
                    default: false,
                    description: 'Whether this SAML IdP is in use.',
                    readOnly: true,
                    type: 'boolean',
                },
                'mapping-azure-aad-account-type': {
                    description: 'Account type.',
                    nullable: true,
                    type: 'string',
                },
                'mapping-azure-aad-client-id': {
                    description: 'Client ID.',
                    nullable: true,
                    type: 'string',
                },
                'mapping-azure-aad-enabled': {
                    default: false,
                    description: 'Use Azure Active Directory.',
                    type: 'boolean',
                },
                'mapping-azure-aad-secret-key': {
                    description: 'Secret key.',
                    nullable: true,
                    type: 'string',
                },
                'mapping-azure-aad-tenant-id': {
                    description: 'Tenant ID.',
                    nullable: true,
                    type: 'string',
                },
                'mapping-email': {
                    description: 'Email attribute, in case usernames and emails are different.',
                    nullable: true,
                    type: 'string',
                },
                'mapping-fullname': {
                    description: 'Display name attribute.',
                    nullable: true,
                    type: 'string',
                },
                'mapping-groups': {
                    description: 'The name of the Groups attribute to use in SAML Assertion.',
                    nullable: true,
                    type: 'string',
                },
                'mapping-separator': {
                    description: 'Groups separator',
                    nullable: true,
                    type: 'string',
                },
                name: {
                    description: 'Name of SAML integration',
                    maxLength: 255,
                    type: 'string',
                },
                'security-allow-repeat-attribute-name': {
                    default: false,
                    description:
                        'If true, it will not raise an error when the Statement Element contains attribute elements with name duplicated.',
                    type: 'boolean',
                },
                'security-authn-requests-signed': {
                    default: false,
                    description: 'Indicates whether the <samlp:AuthnRequest> messages sent by Scalr will be signed.',
                    type: 'boolean',
                },
                'security-digest-algorithm': {
                    description: 'Algorithm that Scalr will use on digest process.',
                    enum: [
                        'http://www.w3.org/2001/04/xmlenc#sha256',
                        'http://www.w3.org/2001/04/xmldsig-more#sha384',
                        'http://www.w3.org/2001/04/xmlenc#sha512',
                    ],
                    nullable: true,
                    type: 'string',
                },
                'security-logout-request-signed': {
                    default: false,
                    description: 'Indicates whether the <samlp:logoutRequest> messages sent by Scalr will be signed.',
                    type: 'boolean',
                },
                'security-logout-response-signed': {
                    default: false,
                    description: 'Indicates whether the <samlp:logoutResponse> messages sent by Scalr will be signed.',
                    type: 'boolean',
                },
                'security-name-id-encrypted': {
                    default: false,
                    description:
                        'Indicates that the nameID of the <samlp:logoutRequest> sent by Scalr will be encrypted.',
                    type: 'boolean',
                },
                'security-requested-authn-context': {
                    default: '["urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"]',
                    description:
                        'Leave empty and no AuthContext will be sent in the AuthNRequest,Set an array with the possible auth context values: ["urn:oasis:names:tc:SAML:2.0:ac:classes:Password", "urn:oasis:names:tc:SAML:2.0:ac:classes:X509"]',
                    type: 'string',
                },
                'security-requested-authn-context-comparison': {
                    default: 'exact',
                    description: 'Allows the authn comparison parameter to be set.',
                    enum: ['exact', 'minimum', 'better', 'maximum'],
                    type: 'string',
                },
                'security-sign-metadata': {
                    description: 'Sign the Metadata. If enabled SP certificate must be provided.',
                    nullable: true,
                    type: 'boolean',
                },
                'security-signature-algorithm': {
                    default: 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256',
                    description: 'Algorithm that Scalr will use on signing process.',
                    enum: [
                        'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256',
                        'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384',
                        'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512',
                    ],
                    type: 'string',
                },
                'security-want-assertions-encrypted': {
                    default: false,
                    description:
                        'Indicates a requirement for the <saml:Assertion> elements received by Scalr to be encrypted.',
                    type: 'boolean',
                },
                'security-want-assertions-signed': {
                    default: false,
                    description:
                        'Indicates a requirement for the <saml:Assertion> elements received by Scalr to be signed.',
                    type: 'boolean',
                },
                'security-want-messages-signed': {
                    default: false,
                    description:
                        'Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> and <samlp:LogoutResponse> elements received by Scalr to be signed.',
                    type: 'boolean',
                },
                'security-want-name-id': {
                    default: true,
                    description:
                        'Indicates a requirement for the NameID element on the SAMLResponse received by this SP to be present.',
                    type: 'boolean',
                },
                'security-want-name-id-encrypted': {
                    default: false,
                    description: 'Indicates a requirement for the NameID received by Scalr to be encrypted.',
                    type: 'boolean',
                },
                'sp-assertion-consumer-service-binding': {
                    default: 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',
                    description:
                        'SAML protocol binding to be used when returning the response message. It supports HTTP-POST binding only.',
                    type: 'string',
                },
                'sp-default-entity-id': {
                    readOnly: true,
                    type: 'string',
                },
                'sp-entity-id': {
                    description: 'Service provider entity identifier',
                    maxLength: 24,
                    type: 'string',
                },
                'sp-name-id-format': {
                    default: 'urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified',
                    description: 'SP name id format',
                    type: 'string',
                },
                'sp-private-key': {
                    description: 'SP private key',
                    nullable: true,
                    type: 'string',
                },
                'sp-single-logout-service-binding': {
                    default: 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',
                    description: 'SP single logout service binding',
                    type: 'string',
                },
                'sp-x509cert': {
                    description: 'SP x509cert',
                    nullable: true,
                    type: 'string',
                },
                'sp-x509cert-new': {
                    description: 'SP x509cert new',
                    nullable: true,
                    type: 'string',
                },
                status: {
                    description: 'Status of SAML integration.',
                    enum: ['active', 'disabled', 'failed'],
                    type: 'string',
                },
                strict: {
                    default: true,
                    description:
                        'If enabled, Scalr will reject unsigned or unencrypted messages when expects them to be signed or encrypted.',
                    type: 'boolean',
                },
                'use-identifier-in-urls': {
                    default: true,
                    type: 'boolean',
                },
                'verification-status': {
                    default: 'pending',
                    description: 'Represents the verification status with the IdP SAML provider)',
                    enum: ['pending', 'success', 'running'],
                    readOnly: true,
                    type: 'string',
                },
            },
            required: ['name', 'idp-entity-id', 'idp-single-sign-on-service-url'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this SAML integration belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['saml-integration'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const SamlIntegrationDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/SamlIntegration',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const SamlIntegrationListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/SamlIntegration',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ServiceAccountSchema = {
    description: `Represents a service account definition.

A service account is a special type of account intended to represent a non-human user
that needs to authenticate and be authorized to access data in Scalr APIs.`,
    properties: {
        attributes: {
            properties: {
                'created-at': {
                    format: 'date-time',
                    readOnly: true,
                    type: 'string',
                },
                description: {
                    description: 'The service account description.',
                    maxLength: 255,
                    nullable: true,
                    type: 'string',
                },
                email: {
                    description:
                        'A read-only field which is generated when a service account is created. Consists of `<name>@<account-domain>.scalr.io`',
                    readOnly: true,
                    type: 'string',
                },
                name: {
                    description: 'The service account name. The service account email will be created using this name.',
                    type: 'string',
                },
                status: {
                    description: 'The service account status. Can be: `Active`, `Inactive`.',
                    enum: ['Active', 'Inactive'],
                    type: 'string',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account ID, the service account belongs to.',
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'created-by': {
                    description: 'The user who created the service account.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['users'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                owners: {
                    description: 'The teams, the service account belongs to.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['teams'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            required: ['account'],
            type: 'object',
        },
        type: {
            enum: ['service-accounts'],
            type: 'string',
        },
    },
    required: ['type', 'relationships'],
    type: 'object',
} as const;

export const ServiceAccountDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/ServiceAccount',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const ServiceAccountListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/ServiceAccount',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const SlackChannelSchema = {
    properties: {
        id: {
            type: 'string',
        },
        'is-private': {
            type: 'boolean',
        },
        name: {
            type: 'string',
        },
    },
    required: ['id', 'is-private', 'name'],
    type: 'object',
} as const;

export const SlackChannelFieldsetsListingDocumentSchema = {
    description: 'Document Listing.',
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/SlackChannel',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const SlackConnectionSchema = {
    properties: {
        attributes: {
            properties: {
                'slack-workspace-name': {
                    description: 'The name of connected Slack workspace.',
                    maxLength: 255,
                    type: 'string',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this connection belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['slack-connections'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const SlackConnectionDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/SlackConnection',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const SlackIntegrationSchema = {
    properties: {
        attributes: {
            properties: {
                'channel-id': {
                    description: 'A Slack channel ID to which to send messages.',
                    maxLength: 24,
                    type: 'string',
                },
                'err-message': {
                    description: 'Message from service that points to nature of a problem',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                events: {
                    description: 'Events for which to get notifications.',
                    items: {
                        enum: ['run_approval_required', 'run_success', 'run_errored'],
                        type: 'string',
                    },
                    type: 'array',
                },
                'is-apply-only': {
                    default: false,
                    description: 'Whether to notify about success or failure from the apply step only',
                    type: 'boolean',
                },
                name: {
                    description: 'Name of Slack integration',
                    maxLength: 128,
                    type: 'string',
                },
                'run-mode': {
                    default: 'all',
                    description: 'What type of runs should be reported.',
                    enum: ['all', 'apply', 'dry'],
                    type: 'string',
                },
                status: {
                    description: 'Status of integration.',
                    enum: ['active', 'disabled', 'failed'],
                    type: 'string',
                },
            },
            required: ['name', 'channel-id'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this integration belongs to.',
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                connection: {
                    description: 'Associated Slack App connection.',
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['slack-connections'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                environments: {
                    description: 'Environments source of events.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['environments'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                workspaces: {
                    description: 'Workspaces source of events.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['workspaces'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            required: ['account', 'connection', 'environments'],
            type: 'object',
        },
        type: {
            enum: ['slack-integrations'],
            type: 'string',
        },
    },
    required: ['type', 'attributes', 'relationships'],
    type: 'object',
} as const;

export const SlackIntegrationDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/SlackIntegration',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const SlackIntegrationListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/SlackIntegration',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const SoftwareVersionSchema = {
    description: 'Represents a software version.',
    properties: {
        attributes: {
            properties: {
                'created-at': {
                    description: 'The resource creation timestamp.',
                    format: 'date-time',
                    readOnly: true,
                    type: 'string',
                },
                default: {
                    default: false,
                    description: `Default version to use when workspace or policy-group creation request
doesn't specify a version.`,
                    readOnly: true,
                    type: 'boolean',
                },
                deprecated: {
                    default: false,
                    description: `Indicates that this software-version is deprecated,
and thus not available for new workspaces or policy-groups.`,
                    type: 'boolean',
                },
                error: {
                    description: `This field contains the error description,
when this software-version's status is \`failed\`.`,
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                hash: {
                    description: 'Container image SHA256 hash.',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                image: {
                    description: `Reference to a container image in OCI registry.
Only public registries supported ATM.`,
                    maxLength: 255,
                    type: 'string',
                },
                latest: {
                    default: false,
                    description: `Indicates that this software-version is the latest one
for the given software-type.`,
                    readOnly: true,
                    type: 'boolean',
                },
                'software-type': {
                    description: 'The type of the software.',
                    enum: ['opa', 'terraform', 'infracost', 'opentofu'],
                    type: 'string',
                },
                status: {
                    description: `The software version status.

* \`pending\` - Image is not pulled yet.
* \`failed\` - Image pull ended with a failure. Attribute \`error\` contains the details.
* \`active\` - Available to use.`,
                    enum: ['pending', 'failed', 'active'],
                    readOnly: true,
                    type: 'string',
                },
                version: {
                    description: 'Semantic Version.',
                    maxLength: 255,
                    type: 'string',
                },
            },
            required: ['version', 'software-type', 'image'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        type: {
            enum: ['software-versions'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const SoftwareVersionDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/SoftwareVersion',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const SoftwareVersionListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/SoftwareVersion',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const SourcesSchema = {
    enum: [
        'api',
        'cli',
        'scalr-cli',
        'configuration-version',
        'service-catalog',
        'ui',
        'vcs',
        'vcs-task',
        'run-trigger',
        'schedule',
        'restart',
        'restart-ci',
        'assistant',
        'dashboard-run',
        'dashboard-workspace',
        'workspaces-environment',
        'workspaces-environment-bulk',
        'workspaces-account',
        'workspaces-account-bulk',
        'reports-iac-versions',
        'reports-stale-workspaces',
        'auto-destroy',
    ],
    type: 'string',
} as const;

export const StateVersionSchema = {
    description: 'A State version is the version of a state file associated with a workspace.',
    properties: {
        attributes: {
            properties: {
                'created-at': {
                    description: 'The resource creation timestamp.',
                    format: 'date-time',
                    readOnly: true,
                    type: 'string',
                },
                force: {
                    type: 'boolean',
                },
                lineage: {
                    description:
                        'Lineage of the state version. Should match the lineage extracted from the `terraform.tfstate`.',
                    maxLength: 255,
                    nullable: true,
                    type: 'string',
                },
                md5: {
                    description: 'The MD5 hash of the terraform.tfstate.',
                    maxLength: 32,
                    type: 'string',
                },
                modules: {
                    additionalProperties: {
                        additionalProperties: {
                            type: 'integer',
                        },
                        type: 'object',
                    },
                    description: 'The list of modules.',
                    readOnly: true,
                    type: 'object',
                },
                outputs: {
                    description: 'The list of output values.',
                    items: {
                        properties: {
                            name: {
                                default: '',
                                type: 'string',
                            },
                            sensitive: {
                                default: false,
                                type: 'boolean',
                            },
                            value: {
                                anyOf: [
                                    {
                                        type: 'string',
                                    },
                                    {
                                        type: 'object',
                                    },
                                    {
                                        items: {},
                                        type: 'array',
                                    },
                                ],
                                default: '',
                                nullable: true,
                            },
                        },
                        type: 'object',
                    },
                    nullable: true,
                    readOnly: true,
                    type: 'array',
                },
                providers: {
                    additionalProperties: {
                        additionalProperties: {
                            type: 'integer',
                        },
                        type: 'object',
                    },
                    description: 'The list of providers.',
                    readOnly: true,
                    type: 'object',
                },
                resources: {
                    description: 'The list of resources.',
                    items: {
                        properties: {
                            address: {
                                default: '',
                                type: 'string',
                            },
                            index: {
                                anyOf: [
                                    {
                                        type: 'string',
                                    },
                                    {
                                        type: 'integer',
                                    },
                                ],
                                nullable: true,
                            },
                            module: {
                                default: '',
                                nullable: true,
                                type: 'string',
                            },
                            type: {
                                default: '',
                                type: 'string',
                            },
                        },
                        type: 'object',
                    },
                    readOnly: true,
                    type: 'array',
                },
                serial: {
                    description:
                        'The serial of the state version which must match the `serial` value from the `terraform.tfstate`.',
                    type: 'integer',
                },
                size: {
                    description: 'Size of the `terraform.tfstate` in bytes.',
                    readOnly: true,
                    type: 'integer',
                },
                state: {
                    description: 'Base64 encoded `terraform.tfstate`',
                    nullable: true,
                    type: 'string',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                download: {
                    description: 'The URL to download the `terraform.tfstate`.',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                'next-state-version': {
                    description: 'Next state version for the workspace to which state version is associated.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['state-versions'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'previous-state-version': {
                    description: 'Previous state version for the workspace to which state version is associated.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['state-versions'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                run: {
                    description: 'The optional run associated with the state version.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['runs'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                workspace: {
                    description: 'The workspace, this state version belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['workspaces'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['state-versions'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const StateVersionDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/StateVersion',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const StateVersionListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/StateVersion',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const StatusTransitionSchema = {
    description: 'Status transition of entity.',
    properties: {
        attributes: {
            properties: {
                'occurred-at': {
                    format: 'date-time',
                    type: 'string',
                },
                reason: {
                    nullable: true,
                    type: 'string',
                },
                status: {
                    type: 'string',
                },
            },
            required: ['status', 'occurred-at'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                user: {
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['users'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['status-transitions'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const StatusTransitionDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/StatusTransition',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TagSchema = {
    description: `Tag is a keyword or term associated with a Scalr resource.
It is used to label resources across the account to help to identify them, improve searchability
or can even participate in a terraform run e.g. as a part of metadata for policy decision.

Tags are unique within the account. Deleted tags will be removed from associated resources.`,
    properties: {
        attributes: {
            properties: {
                name: {
                    description: 'The name of the tag. It must be unique within the account.',
                    maxLength: 255,
                    type: 'string',
                },
            },
            required: ['name'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this tag belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['tags'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const TagDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/Tag',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TagListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/Tag',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TagRelationshipSchema = {
    description: "Represents tags' relationship.",
    properties: {
        id: {
            type: 'string',
        },
        type: {
            enum: ['tags'],
            type: 'string',
        },
    },
    required: ['type', 'id'],
    type: 'object',
} as const;

export const TagRelationshipFieldsetsListingDocumentSchema = {
    description: 'Document Listing.',
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/TagRelationship',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TeamSchema = {
    description: `A [IAM](https://docs.scalr.io/docs/identity-and-access-management) team is used to organize users into logical units.

A team can not be used to group service accounts, only standard users.`,
    properties: {
        attributes: {
            properties: {
                description: {
                    description: 'The verbose description of the team.',
                    maxLength: 255,
                    nullable: true,
                    type: 'string',
                },
                name: {
                    description: 'The name of the team.',
                    maxLength: 255,
                    type: 'string',
                },
            },
            required: ['name'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this team belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'identity-provider': {
                    description: 'Identity provider of the team. Can be internal (Scalr) or external (LDAP/SAML)',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['identity-providers'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                users: {
                    description: 'The list of users in the team.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['users'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['teams'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const TeamDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/Team',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TeamListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/Team',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TerraformModuleUsageSchema = {
    description: 'Represents terraform module usage instance.',
    properties: {
        attributes: {
            properties: {
                module: {
                    type: 'string',
                },
                'parent-module': {
                    nullable: true,
                    type: 'string',
                },
                source: {
                    maxLength: 255,
                    nullable: true,
                    type: 'string',
                },
                'versions-used-count': {
                    description: 'Number of module versions.',
                    type: 'integer',
                },
                'workspaces-count': {
                    description: 'Number of module workspaces.',
                    type: 'integer',
                },
            },
            required: ['module', 'versions-used-count', 'workspaces-count'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                namespace: {
                    description: 'The namespace this usage instance belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['tf-module-namespaces'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['tf-module-usages'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const TerraformModuleUsageDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/TerraformModuleUsage',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TerraformModuleUsageListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/TerraformModuleUsage',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TerraformModuleUsageSourceSchema = {
    description: 'Represents terraform module source',
    properties: {
        source: {
            type: 'string',
        },
    },
    required: ['source'],
    type: 'object',
} as const;

export const TerraformModuleUsageSourceFieldsetsListingDocumentSchema = {
    description: 'Document Listing.',
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/TerraformModuleUsageSource',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TerraformModuleUsageVersionSchema = {
    description: 'Represents terraform module version',
    properties: {
        version: {
            type: 'string',
        },
    },
    type: 'object',
} as const;

export const TerraformModuleUsageVersionFieldsetsListingDocumentSchema = {
    description: 'Document Listing.',
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/TerraformModuleUsageVersion',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TerraformModuleVersionUsageSchema = {
    description: 'Represents terraform module version usage instance.',
    properties: {
        attributes: {
            properties: {
                'created-at': {
                    format: 'date-time',
                    type: 'string',
                },
                version: {
                    maxLength: 64,
                    nullable: true,
                    type: 'string',
                },
            },
            required: ['created-at'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                environment: {
                    description: 'The environment this usage instance belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['environments'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                workspace: {
                    description: 'The workspace this usage instance belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['workspaces'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['tf-module-version-usages'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const TerraformModuleVersionUsageListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/TerraformModuleVersionUsage',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TerraformProviderUsageSchema = {
    description: 'Represents terraform provider usage instance.',
    properties: {
        attributes: {
            properties: {
                provider: {
                    type: 'string',
                },
                source: {
                    maxLength: 255,
                    type: 'string',
                },
                'versions-used-count': {
                    type: 'integer',
                },
                'workspaces-count': {
                    type: 'integer',
                },
            },
            required: ['provider', 'source', 'versions-used-count', 'workspaces-count'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        type: {
            enum: ['tf-provider-usages'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const TerraformProviderUsageDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/TerraformProviderUsage',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TerraformProviderUsageListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/TerraformProviderUsage',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TerraformProviderUsageSourceSchema = {
    description: 'Represents terraform provider source',
    properties: {
        source: {
            type: 'string',
        },
    },
    required: ['source'],
    type: 'object',
} as const;

export const TerraformProviderUsageSourceFieldsetsListingDocumentSchema = {
    description: 'Document Listing.',
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/TerraformProviderUsageSource',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TerraformProviderUsageVersionSchema = {
    description: 'Represents terraform provider version',
    properties: {
        version: {
            type: 'string',
        },
    },
    required: ['version'],
    type: 'object',
} as const;

export const TerraformProviderUsageVersionFieldsetsListingDocumentSchema = {
    description: 'Document Listing.',
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/TerraformProviderUsageVersion',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TerraformProviderVersionUsageSchema = {
    description: 'Represents terraform provider version usage.',
    properties: {
        attributes: {
            properties: {
                'created-at': {
                    format: 'date-time',
                    type: 'string',
                },
                version: {
                    maxLength: 64,
                    nullable: true,
                    type: 'string',
                },
            },
            required: ['version', 'created-at'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                environment: {
                    description: 'The environment this usage instance belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['environments'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                workspace: {
                    description: 'The workspace this usage belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['workspaces'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['tf-provider-version-usages'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const TerraformProviderVersionUsageListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/TerraformProviderVersionUsage',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TerraformResourceInstanceUsageSchema = {
    description: 'Represents terraform resource instance usage',
    properties: {
        attributes: {
            properties: {
                address: {
                    description: 'Resource instance address. Combines module, name and index of the resource.',
                    maxLength: 255,
                    type: 'string',
                },
                'external-id': {
                    description: 'External ID of the resource instance.',
                    maxLength: 1024,
                    type: 'string',
                },
                'is-active': {
                    default: true,
                    description: 'Indicates if the resource instance is active.',
                    type: 'boolean',
                },
                'is-duplicate': {
                    default: false,
                    description: 'Indicates if the resource is a duplicate',
                    type: 'boolean',
                },
                name: {
                    description: 'Resource instance name.',
                    maxLength: 255,
                    type: 'string',
                },
                'updated-at': {
                    description: 'Time when the resource instance was created or updated.',
                    format: 'date-time',
                    type: 'string',
                },
                'updated-by-email': {
                    description: 'The email of the user who create or update this resource instance.',
                    maxLength: 100,
                    type: 'string',
                },
                'workspace-name': {
                    description: 'Name of the workspace this resource instance belongs to.',
                    maxLength: 255,
                    type: 'string',
                },
            },
            required: ['name', 'external-id', 'address', 'workspace-name', 'updated-at', 'updated-by-email'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                environment: {
                    description: 'The environment this resource instance belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['environments'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                resource: {
                    description: 'The resource this instance belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['tf-resource-usages'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                run: {
                    description: 'The run which created or updated this resource instance.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['runs'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'state-version': {
                    description: 'The state version this resource instance belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['state-versions'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                workspace: {
                    description: 'The workspace this resource instance belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['workspaces'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['tf-resource-instance-usages'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const TerraformResourceInstanceUsageListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/TerraformResourceInstanceUsage',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TerraformResourceUsageSchema = {
    description: 'Represents terraform resource usage instance',
    properties: {
        attributes: {
            properties: {
                'active-instances-count': {
                    description: 'The total number of resource instances which are present in the infrastructure.',
                    type: 'integer',
                },
                'deleted-instances-count': {
                    description: 'The total number of resource instances which are deleted from the infrastructure.',
                    type: 'integer',
                },
                name: {
                    description: 'Resource name.',
                    maxLength: 255,
                    type: 'string',
                },
                'provider-type': {
                    description: 'Terraform provider by which resource is managed.',
                    maxLength: 64,
                    type: 'string',
                },
                'workspaces-count': {
                    description: 'The total number of workspaces where this resource is used.',
                    type: 'integer',
                },
            },
            required: [
                'name',
                'provider-type',
                'active-instances-count',
                'deleted-instances-count',
                'workspaces-count',
            ],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this resource belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['tf-resource-usages'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const TerraformResourceUsageDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/TerraformResourceUsage',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TerraformResourceUsageListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/TerraformResourceUsage',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TerraformResourceUsageProviderTypeSchema = {
    description: 'Represents terraform resource provider type',
    properties: {
        'provider-type': {
            description: 'Terraform provider type.',
            type: 'string',
        },
    },
    required: ['provider-type'],
    type: 'object',
} as const;

export const TerraformResourceUsageProviderTypeFieldsetsListingDocumentSchema = {
    description: 'Document Listing.',
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/TerraformResourceUsageProviderType',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TerraformVersionUsageSchema = {
    description: 'Represents terraform version usage instance.',
    properties: {
        attributes: {
            properties: {
                'created-at': {
                    format: 'date-time',
                    type: 'string',
                },
                'iac-platform': {
                    description: 'The IaC platform of the usage instance.',
                    enum: ['terraform', 'opentofu'],
                    type: 'string',
                },
                version: {
                    maxLength: 64,
                    type: 'string',
                },
            },
            required: ['version', 'created-at'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this usage instance belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                environment: {
                    description: 'The environment this usage instance belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['environments'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                workspace: {
                    description: 'The workspace this usage instance belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['workspaces'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['tf-version-usages'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const TerraformVersionUsageListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/TerraformVersionUsage',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const TerraformVersionUsageVersionSchema = {
    description: 'Represents terraform version',
    properties: {
        version: {
            type: 'string',
        },
    },
    required: ['version'],
    type: 'object',
} as const;

export const TerraformVersionUsageVersionFieldsetsListingDocumentSchema = {
    description: 'Document Listing.',
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/TerraformVersionUsageVersion',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const UsageStatisticSchema = {
    properties: {
        attributes: {
            properties: {
                'breakdown-id': {
                    description: 'The identifier of a resource by which the usage is broken down',
                    nullable: true,
                    type: 'string',
                },
                'breakdown-name': {
                    description: 'The name of a resource by which the usage is broken down',
                    nullable: true,
                    type: 'string',
                },
                date: {
                    description: 'The date when usage has been recorded',
                    format: 'date',
                    nullable: true,
                    type: 'string',
                },
                'runs-count': {
                    default: 0,
                    description: 'The count of runs finished within the date',
                    type: 'integer',
                },
                'runs-seconds': {
                    default: 0,
                    description: 'The duration of runs in seconds within the date',
                    type: 'integer',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account id usage is reported for',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['usage-statistics'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const UsageStatisticListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/UsageStatistic',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const UserSchema = {
    description: 'Represents a Scalr [IAM](https://docs.scalr.io/docs/identity-and-access-management) user.',
    properties: {
        attributes: {
            properties: {
                'created-at': {
                    format: 'date-time',
                    nullable: true,
                    type: 'string',
                },
                email: {
                    maxLength: 255,
                    type: 'string',
                },
                'full-name': {
                    maxLength: 100,
                    nullable: true,
                    type: 'string',
                },
                'last-login-at': {
                    format: 'date-time',
                    nullable: true,
                    type: 'string',
                },
                status: {
                    enum: ['Active', 'Inactive', 'Pending'],
                    type: 'string',
                },
                username: {
                    maxLength: 255,
                    type: 'string',
                },
            },
            required: ['email'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                'identity-providers': {
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['identity-providers'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                teams: {
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['teams'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['users'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const UserDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/User',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const UserInviteSchema = {
    description:
        'Represents an create [IAM](https://docs.scalr.io/docs/identity-and-access-management) account user request.',
    properties: {
        attributes: {
            properties: {
                email: {
                    format: 'email',
                    type: 'string',
                },
                'send-invite': {
                    default: true,
                    description: 'If set to `true`, email with invite to the account will be sent to the user email.',
                    type: 'boolean',
                },
            },
            required: ['email'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                roles: {
                    description: 'Assign roles for this user on the account scope.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['roles'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                teams: {
                    description: 'Add user to the teams.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['teams'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['users'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const UserInviteDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/UserInvite',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const UserListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/User',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const VariableSchema = {
    description: `A Variable describes the configuration and value of a variable in a workspace.

In Scalr there are "terraform" and "environment" variables.

* Terraform variables define values to be passed into the corresponding Terraform input variable
  that is defined in the Configuration Version to be used in a run. Scalr Terraform variables
  are added to the \`terraform.tfvars.json\` file in the working directory of the workspace prior to any run.
  The values passed in can be HCL structures if the \`hcl\` attribute is \`true\`.
* Environment variables define shell variables that are added to the run time environment of a workspace
  using \`export VAR=value\`. These variables can pass authentication parameters to providers
  or any data required for local processing, such as via \`local-exec\` provisioners.`,
    properties: {
        attributes: {
            properties: {
                category: {
                    description: `* \`terraform\` - Values to be passed to terraform input variables of the same name.
* \`env\` - shell environment variables. They will be injected via \`export\` during a terraform run.`,
                    enum: ['terraform', 'env', 'shell'],
                    type: 'string',
                },
                description: {
                    description: 'Variable description.',
                    maxLength: 512,
                    nullable: true,
                    type: 'string',
                },
                final: {
                    default: false,
                    description:
                        'Indicates whether the variable can be overridden on a lower down the Scalr organizational model.',
                    type: 'boolean',
                },
                hcl: {
                    default: false,
                    description: `Indicates whether the value of the variable is a string of HCL code.
Not applicable to \`env\` category variables.`,
                    type: 'boolean',
                },
                key: {
                    description: `Variable name. Must correspond to the name of a Terraform input variable in the configuration
if category is terraform.`,
                    maxLength: 128,
                    type: 'string',
                },
                sensitive: {
                    default: false,
                    description: `Indicates whether the value is sensitive. When set to \`true\` then the variable is not visible
after being written.`,
                    type: 'boolean',
                },
                value: {
                    default: '',
                    description: 'Variable value. Not visible if sensitive: true is enabled',
                    nullable: true,
                    type: 'string',
                },
            },
            required: ['category', 'key'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this variable belongs to',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                environment: {
                    description: 'The environment this variable belongs to',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['environments'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                workspace: {
                    description: 'The workspace this variable belongs to.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['workspaces'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['vars'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const VariableDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/Variable',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const VariableListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/Variable',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const VcsProviderSchema = {
    description: `The [VCS Provider](../../vcs_providers.html) resource represents a connection between a Scalr
account and a VCS, such as GitHub, Gitlab, Bitbucket, and Azure DevOps.`,
    properties: {
        attributes: {
            properties: {
                'auth-type': {
                    description: `Authentication type, the VCS API client is using to establish connection with the VCS.

* \`oauth2\` - private OAuth App, user or organization creates in their VCS account.
Setup through this method requires a user to complete a
[web flow through a browser](../../vcs_providers.html#github),
where the user should authorize Scalr to connect to their OAuth App.

* \`personal_token\` - a pre-generated authentication token. This method works better if
  you need to fully automate the VCS provider creation.

  How to generate access tokens for different VCS providers:
  * [GitHub and GitHub Enterprise](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token)
  * [GitLab and GitLab Enterprise](https://docs.gitlab.com/ce/user/profile/personal_access_tokens.html#creating-a-personal-access-token)
  * [Azure DevOps](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops-2019&tabs=preview-page)
  * [Bitbucket Data Center](https://confluence.atlassian.com/bitbucketserver/personal-access-tokens-939515499.html)`,
                    enum: ['oauth2', 'personal_token'],
                    type: 'string',
                },
                'comments-enabled': {
                    default: false,
                    description: 'Indicates whether commenting on PRs is enabled for this VCS provider.',
                    type: 'boolean',
                },
                'draft-pr-runs-enabled': {
                    default: false,
                    description: 'Indicates whether the draft pull-request runs are enabled for this VCS provider.',
                    type: 'boolean',
                },
                'error-message': {
                    description: 'Contains error message, if the connection to VCS provider is broken.',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'is-shared': {
                    description:
                        'Indicates whether the VCS provider can be used in any account environments or only linked one.',
                    type: 'boolean',
                },
                name: {
                    description: 'VCS provider name, which must be unique within the account.',
                    maxLength: 255,
                    minLength: 1,
                    pattern: '^[ A-Za-z0-9_-]+$',
                    type: 'string',
                },
                token: {
                    description: 'Access token for an API client for using to connect to the VCS Provider.',
                    nullable: true,
                    type: 'string',
                },
                url: {
                    description: `The URL to the VCS provider installation.
Required for GitHub Enterprise, GitLab Enterprise and Bitbucket Data Center.`,
                    format: 'uri',
                    maxLength: 255,
                    minLength: 1,
                    nullable: true,
                    type: 'string',
                },
                username: {
                    description:
                        'Username for personal_token auth type. This field is required for bitbucket_enterprise provider.',
                    maxLength: 255,
                    nullable: true,
                    type: 'string',
                },
                'vcs-type': {
                    description: 'VCS provider type.',
                    enum: [
                        'github',
                        'gitlab',
                        'bitbucket',
                        'bitbucket_enterprise',
                        'gitlab_enterprise',
                        'github_enterprise',
                        'azure_dev_ops_services',
                    ],
                    type: 'string',
                },
            },
            required: ['name', 'vcs-type', 'auth-type'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account that owns this VCS integration.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'agent-pool': {
                    description:
                        'The ID of the agent pool to communicate with on-prem VCS provider that not accessible directly.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['agent-pools'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                environments: {
                    description: 'The list of environments this VCS integration is linked to.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['environments'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            type: 'object',
        },
        type: {
            enum: ['vcs-providers'],
            type: 'string',
        },
    },
    required: ['type', 'attributes'],
    type: 'object',
} as const;

export const VcsProviderDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/VcsProvider',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const VcsProviderListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/VcsProvider',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const VcsRevisionSchema = {
    description: 'Resource represents a VCS revision attributes.',
    properties: {
        attributes: {
            properties: {
                branch: {
                    maxLength: 255,
                    nullable: true,
                    type: 'string',
                },
                'clone-url': {
                    type: 'string',
                },
                'commit-message': {
                    nullable: true,
                    type: 'string',
                },
                'commit-sha': {
                    maxLength: 40,
                    nullable: true,
                    type: 'string',
                },
                'commit-url': {
                    nullable: true,
                    type: 'string',
                },
                'repository-id': {
                    maxLength: 255,
                    type: 'string',
                },
                'sender-username': {
                    maxLength: 255,
                    nullable: true,
                    type: 'string',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        type: {
            enum: ['vcs-revisions'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const VcsRevisionDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/VcsRevision',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const VcsTaskRequestSchema = {
    description: 'Represents a request for creating a VCS task.',
    properties: {
        branch: {
            maxLength: 255,
            minLength: 1,
            type: 'string',
        },
        'commit-sha': {
            maxLength: 40,
            minLength: 1,
            type: 'string',
        },
        'repository-id': {
            maxLength: 255,
            minLength: 1,
            type: 'string',
        },
    },
    required: ['repository-id', 'branch', 'commit-sha'],
    type: 'object',
} as const;

export const WebhookIntegrationSchema = {
    description: `Represents the webhook integration

The extra fields below are not available in response by default. Ask for them explicitly in the query parameter \`fields[webhook-integrations]\`:
* statistics`,
    properties: {
        attributes: {
            properties: {
                enabled: {
                    description: 'Webhook can be turned off by setting to `false`.',
                    type: 'boolean',
                },
                headers: {
                    items: {
                        properties: {
                            name: {
                                description: 'A header name.',
                                type: 'string',
                            },
                            sensitive: {
                                default: false,
                                description: 'Whether the value is a sensitive.',
                                type: 'boolean',
                            },
                            value: {
                                description: 'A header value. Not visible if sensitive.',
                                nullable: true,
                                type: 'string',
                            },
                        },
                        required: ['name', 'value'],
                        type: 'object',
                    },
                    nullable: true,
                    type: 'array',
                },
                'http-method': {
                    default: 'POST',
                    readOnly: true,
                    type: 'string',
                },
                'is-shared': {
                    description:
                        'Indicates whether the webhook is available in any environment of the account without directly linking it.',
                    type: 'boolean',
                },
                'last-triggered-at': {
                    description: 'The Date/Time of the last notification.',
                    format: 'date-time',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'max-attempts': {
                    default: 3,
                    description: 'The number of retry attempts.',
                    type: 'integer',
                },
                name: {
                    description:
                        'The name of the webhook. Use your target application/component name for better discoverability.',
                    maxLength: 255,
                    type: 'string',
                },
                'secret-key': {
                    description: 'The secret passphrase for HMAC signature.',
                    maxLength: 1024,
                    type: 'string',
                },
                statistics: {
                    description:
                        'Webhook delivery statistics (delivered, failed and total) by periods: last hour, last day and last week',
                    nullable: true,
                    properties: {
                        'last-day': {
                            properties: {
                                delivered: {
                                    default: 0,
                                    type: 'integer',
                                },
                                failed: {
                                    default: 0,
                                    type: 'integer',
                                },
                                total: {
                                    default: 0,
                                    type: 'integer',
                                },
                            },
                            type: 'object',
                        },
                        'last-hour': {
                            properties: {
                                delivered: {
                                    default: 0,
                                    type: 'integer',
                                },
                                failed: {
                                    default: 0,
                                    type: 'integer',
                                },
                                total: {
                                    default: 0,
                                    type: 'integer',
                                },
                            },
                            type: 'object',
                        },
                        'last-week': {
                            properties: {
                                delivered: {
                                    default: 0,
                                    type: 'integer',
                                },
                                failed: {
                                    default: 0,
                                    type: 'integer',
                                },
                                total: {
                                    default: 0,
                                    type: 'integer',
                                },
                            },
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    type: 'object',
                },
                timeout: {
                    default: 15,
                    description: 'The HTTP transaction timeout.',
                    type: 'integer',
                },
                url: {
                    description: 'HTTP(s) destination URL.',
                    maxLength: 2048,
                    type: 'string',
                },
            },
            required: ['name', 'url'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                account: {
                    description: 'The account this webhook belongs to.',
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['accounts'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                environments: {
                    description: 'The list of environments this webhook is linked to.',
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['environments'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                events: {
                    description: `The list of events this webhook will be notified about.
Use [List Event Definitions](event-definitions.html#list-event-definitions) to obtain the list
of all available events.`,
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['event-definitions'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            required: ['account'],
            type: 'object',
        },
        type: {
            enum: ['webhook-integrations'],
            type: 'string',
        },
    },
    required: ['type', 'attributes', 'relationships'],
    type: 'object',
} as const;

export const WebhookIntegrationDeliverySchema = {
    description: 'Represents an IaCP Webhook integration delivery.',
    properties: {
        attributes: {
            properties: {
                attempts: {
                    description: 'The number of attempts made to deliver the webhook.',
                    type: 'integer',
                },
                'error-message': {
                    description: 'The error message, if any, encountered during delivery.',
                    nullable: true,
                    type: 'string',
                },
                'last-handle-attempt-at': {
                    description: 'The Date/Time of the last attempt to deliver the webhook.',
                    format: 'date-time',
                    type: 'string',
                },
                'request-body': {
                    description: 'The data payload (JSON format) sent in the webhook request body.',
                    type: 'object',
                },
                'request-headers': {
                    description: 'The HTTP request headers sent with the webhook.',
                    type: 'object',
                },
                'response-body': {
                    anyOf: [
                        {
                            type: 'object',
                        },
                        {
                            type: 'string',
                        },
                    ],
                    description:
                        'The data (JSON or plain text) received in the response body from the external system.',
                    nullable: true,
                },
                'response-code': {
                    description: 'The HTTP status code returned by the external system.',
                    nullable: true,
                    type: 'integer',
                },
                'response-headers': {
                    description: 'The HTTP response headers received from the external system.',
                    nullable: true,
                    type: 'object',
                },
                status: {
                    description: 'The delivery status. Can be: `pending`, `completed`, or `failed`.',
                    type: 'string',
                },
                'triggered-at': {
                    description: 'The Date/Time when the webhook was triggered.',
                    format: 'date-time',
                    type: 'string',
                },
            },
            required: ['status'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        relationships: {
            properties: {
                environment: {
                    description: 'The environment related to the webhook delivery.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['environments'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                event: {
                    description: 'The specific event that triggered this webhook delivery.',
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['event-definitions'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                run: {
                    description: 'The optional run associated with the webhook delivery.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['runs'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'triggered-by': {
                    description: 'The user who triggered the webhook.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['users'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                webhook: {
                    description: 'The webhook this delivery belongs to.',
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['webhook-integrations'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                workspace: {
                    description: 'The workspace related to the webhook delivery.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['workspaces'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            required: ['webhook', 'event'],
            type: 'object',
        },
        type: {
            enum: ['webhook-integration-deliveries'],
            type: 'string',
        },
    },
    required: ['type', 'attributes', 'relationships'],
    type: 'object',
} as const;

export const WebhookIntegrationDeliveryDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/WebhookIntegrationDelivery',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const WebhookIntegrationDeliveryListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/WebhookIntegrationDelivery',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const WebhookIntegrationDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/WebhookIntegration',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const WebhookIntegrationListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/WebhookIntegration',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const WorkspaceSchema = {
    description: `A Workspace is where Terraform runs are performed for a specific configuration, and where the resulting
state file(s) are stored.

Workspaces belong to environments and can have \`variables\` configured to provide inputs to the configuration,
authenticate providers etc.

The extra fields below are not available in response by default. Ask for them explicitly in the query parameter \`fields[workspaces]\`:
* module`,
    properties: {
        attributes: {
            properties: {
                'apply-schedule': {
                    description: 'Cron expression for scheduled runs. Time should be in UTC.',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'auto-apply': {
                    description: `Indicates whether \`terraform apply\` should automatically run
when terraform plan ends without error. Default \`false\`.`,
                    type: 'boolean',
                },
                'auto-destroy-days': {
                    description: 'How many days should the workspace exist.',
                    enum: [1, 2, 7, 14],
                    nullable: true,
                    type: 'integer',
                },
                'auto-destroy-status': {
                    description: 'The status of scheduled destruction of the workspace.',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'auto-destroy-time': {
                    description: 'When should the destruction of the workspace begin.',
                    format: 'date-time',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'auto-queue-runs': {
                    default: 'skip_first',
                    description: `Indicates if runs have to be queued automatically when a new configuration version is uploaded.
\`skip_first\` - after the very first configuration version is uploaded into the workspace the run will not be triggered.
    But the following configurations will do. This is the default behavior.
\`always\` - runs will be triggered automatically on every upload of the configuration version.
\`never\` - configuration versions are uploaded into the workspace, but runs will not be triggered.`,
                    enum: ['always', 'never', 'skip_first'],
                    type: 'string',
                },
                'created-at': {
                    description: 'The resource creation timestamp.',
                    format: 'date-time',
                    readOnly: true,
                    type: 'string',
                },
                'deletion-protection-changed-by-email': {
                    description: 'The email of a user who toggled deletion protection.',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'deletion-protection-enabled': {
                    description: 'Designates whether deletion protection is enabled.',
                    type: 'boolean',
                },
                'destroy-schedule': {
                    description: 'Cron expression for scheduled destroy runs. Time should be in UTC.',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'environment-type': {
                    description: 'The type of the Scalr Workspace environment.',
                    enum: ['production', 'staging', 'testing', 'development', 'unmapped'],
                    type: 'string',
                },
                'execution-mode': {
                    default: 'remote',
                    description: `Which execution mode to use. Valid values are \`remote\` and \`local\`.
When set to \`local\`, the workspace will be used for state storage only.`,
                    enum: ['remote', 'local'],
                    type: 'string',
                },
                'force-latest-run': {
                    description: `Indicates whether \`force run\` should automatically apply to latest run.
Default \`false\`.`,
                    type: 'boolean',
                },
                'global-remote-state': {
                    description: 'Specifies if the state is globally shared within the environment.',
                    type: 'boolean',
                },
                'has-resources': {
                    description:
                        "Indicates whether the workspace's current state version contains terraform resources.",
                    readOnly: true,
                    type: 'boolean',
                },
                hooks: {
                    nullable: true,
                    properties: {
                        'post-apply': {
                            description: 'Command that should be run after terraform apply operation executed.',
                            nullable: true,
                            type: 'string',
                        },
                        'post-plan': {
                            description: 'Command that should be run after terraform plan operation executed.',
                            nullable: true,
                            type: 'string',
                        },
                        'pre-apply': {
                            description: 'Command that should be run before terraform apply operation executed.',
                            nullable: true,
                            type: 'string',
                        },
                        'pre-init': {
                            description: 'Command that should be run before terraform init operation executed.',
                            nullable: true,
                            type: 'string',
                        },
                        'pre-plan': {
                            description: 'Command that should be run before terraform plan operation executed.',
                            nullable: true,
                            type: 'string',
                        },
                    },
                    type: 'object',
                },
                'iac-platform': {
                    default: 'terraform',
                    description: 'The IaC platform of this workspace.',
                    enum: ['terraform', 'opentofu'],
                    type: 'string',
                },
                'lock-reason': {
                    description: 'The reason (if any) that the workspace has been locked.',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                locked: {
                    description: `Indicates whether the workspace is locked for operations. The \`lock-reason\` attribute
carries the explanation.

This semaphore is acquired and released by terraform apply and can also manage it with
Lock/Unlock Workspace.

Default: \`false\``,
                    readOnly: true,
                    type: 'boolean',
                },
                name: {
                    description: `Workspace name which must be unique within the environment.

Comprises letters, numbers, \`-\`, and \`_\` only.`,
                    maxLength: 255,
                    type: 'string',
                },
                operations: {
                    deprecated: true,
                    description: 'The attribute `operations` is deprecated. Use `execution-mode` instead.',
                    type: 'boolean',
                },
                permissions: {
                    readOnly: true,
                    type: 'object',
                },
                'run-operation-timeout': {
                    description: 'The timeout for the Terraform Run operations (in minutes).',
                    nullable: true,
                    type: 'integer',
                },
                'terraform-version': {
                    description:
                        'The version of Terraform the workspace performs runs on. If omitted, the system default version is assigned.',
                    type: 'string',
                },
                'updated-at': {
                    description: 'The resource last update timestamp.',
                    format: 'date-time',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'updated-by-email': {
                    description: 'The email of the last user, that updated this workspace.',
                    nullable: true,
                    readOnly: true,
                    type: 'string',
                },
                'var-files': {
                    default: [],
                    description: 'The list of Terraform variables files.',
                    items: {
                        type: 'string',
                    },
                    nullable: true,
                    type: 'array',
                },
                'vcs-repo': {
                    nullable: true,
                    properties: {
                        branch: {
                            description: `Branch of a repository the workspace is associated with.
If omitted, the repository default branch will be used.`,
                            nullable: true,
                            type: 'string',
                        },
                        'dry-runs-enabled': {
                            default: true,
                            description: `When true once a pull request into the vcs-repo.branch is opened, every push
to a pull request's branch will trigger a dry run in the workspace. Default \`true\``,
                            type: 'boolean',
                        },
                        identifier: {
                            description: `A reference to your VCS repository.

For GitHub, GitHub Enterprise and GitLab the format is \`<org>/<repo>\`.
Azure DevOps Services has the format \`<org>/<project>/<repo>\`.`,
                            type: 'string',
                        },
                        'ingress-submodules': {
                            default: false,
                            description:
                                'Specifies whether git submodules should be fetched when cloning the VCS repository.',
                            type: 'boolean',
                        },
                        path: {
                            default: '',
                            deprecated: true,
                            description:
                                'The attribute `vcs-repo.path` is deprecated. Use working-directory and trigger-prefixes instead.',
                            nullable: true,
                            type: 'string',
                        },
                        'trigger-patterns': {
                            description: `List of path patterns in gitignore format, whose changes will trigger a run for the
workspace using this binding when the CV is created.
Conflicts with 'trigger-prefixes'.
If 'trigger-patterns' and 'trigger-prefixes' are omitted, any change in the configuration version root will trigger a new run.`,
                            nullable: true,
                            type: 'string',
                        },
                        'trigger-prefixes': {
                            default: [],
                            description: `List of paths (relative to the configuration version root), whose changes will trigger a run for the
workspace using this binding when the CV is created.
Conflicts with 'trigger-patterns'.
If 'trigger-patterns' and 'trigger-prefixes' are omitted, any change in the configuration version root will trigger a new run.`,
                            items: {
                                type: 'string',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['identifier'],
                    type: 'object',
                },
                'working-directory': {
                    description: 'A relative path where Terraform commands will execute in.',
                    maxLength: 255,
                    nullable: true,
                    type: 'string',
                },
            },
            required: ['name'],
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            properties: {
                self: {
                    readOnly: true,
                    type: 'string',
                },
            },
            readOnly: true,
            type: 'object',
        },
        relationships: {
            properties: {
                'agent-pool': {
                    description: 'The ID of the agent pool.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['agent-pools'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'configuration-version': {
                    description: 'The latest uploaded configuration version.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['configuration-versions'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'created-by': {
                    description: 'The user, who has triggered the run.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['users'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'current-run': {
                    description: 'Currently executing Run.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['runs'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                environment: {
                    description: 'The environment this workspace belongs to.',
                    properties: {
                        data: {
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['environments'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'latest-configuration-version': {
                    description: 'The configuration version of the latest non-dry Run in this workspace.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['configuration-versions'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'latest-run': {
                    description: 'Latest finished Run.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['runs'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'locked-by': {
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['users'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'locked-by-run': {
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['runs'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                module: {
                    description: 'The ID of the module.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['modules'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'module-version': {
                    description: 'The ID of the module version.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['module-versions'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'readme-id': {
                    description: 'The readme for the workspace.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['workspace-readme'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                tags: {
                    properties: {
                        data: {
                            items: {
                                properties: {
                                    id: {
                                        type: 'string',
                                    },
                                    type: {
                                        enum: ['tags'],
                                        type: 'string',
                                    },
                                },
                                required: ['type', 'id'],
                                type: 'object',
                            },
                            nullable: true,
                            type: 'array',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
                'updated-by': {
                    description: 'The last user, that updated this workspace.',
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['users'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    readOnly: true,
                    required: ['data'],
                    type: 'object',
                },
                'vcs-provider': {
                    description: "VCS provider of the Run's workspace",
                    properties: {
                        data: {
                            nullable: true,
                            properties: {
                                id: {
                                    type: 'string',
                                },
                                type: {
                                    enum: ['vcs-providers'],
                                    type: 'string',
                                },
                            },
                            required: ['type', 'id'],
                            type: 'object',
                        },
                    },
                    required: ['data'],
                    type: 'object',
                },
            },
            required: ['environment'],
            type: 'object',
        },
        type: {
            enum: ['workspaces'],
            type: 'string',
        },
    },
    required: ['type', 'attributes', 'relationships'],
    type: 'object',
} as const;

export const WorkspaceDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/Workspace',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const WorkspaceListingDocumentSchema = {
    description: `JSON:API Document Listing

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/Workspace',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const WorkspaceOutputSchema = {
    description: 'Represents a run output.',
    properties: {
        name: {
            description: 'The name of the output.',
            type: 'string',
        },
        sensitive: {
            description: 'Whether the value of the output is sensitive.',
            type: 'boolean',
        },
        value: {
            description: 'The value of the output.',
            nullable: true,
        },
    },
    type: 'object',
} as const;

export const WorkspaceOutputFieldsetsListingDocumentSchema = {
    description: 'Document Listing.',
    properties: {
        data: {
            items: {
                $ref: '#/components/schemas/WorkspaceOutput',
            },
            type: 'array',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            readOnly: true,
            type: 'object',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const WorkspaceReadmeSchema = {
    description: 'A WorkspaceReadme resource represents the readme file for a workspace.',
    properties: {
        attributes: {
            properties: {
                content: {
                    description: 'The content of the readme file.',
                    type: 'string',
                },
                'created-at': {
                    description: 'The time when the readme record was created.',
                    format: 'date-time',
                    type: 'string',
                },
            },
            type: 'object',
        },
        id: {
            readOnly: true,
            type: 'string',
        },
        links: {
            additionalProperties: {
                type: 'string',
            },
            type: 'object',
        },
        type: {
            enum: ['workspace-readme'],
            type: 'string',
        },
    },
    required: ['type'],
    type: 'object',
} as const;

export const WorkspaceReadmeDocumentSchema = {
    description: `JSON:API Document.

see: https://jsonapi.org/format/#document-structure`,
    properties: {
        data: {
            $ref: '#/components/schemas/WorkspaceReadme',
        },
        included: {
            items: {
                type: 'object',
            },
            readOnly: true,
            type: 'array',
        },
        meta: {
            readOnly: true,
            type: 'object',
        },
    },
    type: 'object',
} as const;

export const WorkspaceScheduleSchema = {
    properties: {
        'apply-schedule': {
            nullable: true,
            type: 'string',
        },
        'destroy-schedule': {
            nullable: true,
            type: 'string',
        },
    },
    type: 'object',
} as const;
