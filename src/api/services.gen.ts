// This file is auto-generated by @hey-api/openapi-ts

import { client, type Options } from '@hey-api/client-fetch';
import type {
    GetAccountsData,
    GetAccountsError,
    GetAccountsResponse,
    GetRunsData,
    GetRunsError,
    GetRunsResponse,
    CreateRunData,
    CreateRunError,
    CreateRunResponse,
    GetWorkspacesData,
    GetWorkspacesError,
    GetWorkspacesResponse,
    CreateWorkspaceData,
    CreateWorkspaceError,
    CreateWorkspaceResponse,
} from './types.gen';

/**
 * List Accounts
 */
export const getAccounts = (options?: Options<GetAccountsData>) => {
    return (options?.client ?? client).get<GetAccountsResponse, GetAccountsError>(
        {
            ...options,
            url: '/accounts',
        },
    );
};

/**
 * List Runs
 * This endpoint lists runs for a specific workspace.
 */
export const getRuns = (options?: Options<GetRunsData>) => {
    return (options?.client ?? client).get<GetRunsResponse, GetRunsError>({
        ...options,
        url: '/runs',
    });
};

/**
 * Create a Run
 * A run performs terraform plan and apply using a configuration version and
 * the workspace's current variables. If the configuration version is omitted, the run will
 * be created using the workspace's latest configuration version. If you want to create a
 * dry run, specify `is-dry: true` or reference configuration version with `is-dry: true`
 * in the relationships.
 *
 */
export const createRun = (options?: Options<CreateRunData>) => {
    return (options?.client ?? client).post<CreateRunResponse, CreateRunError>({
        ...options,
        url: '/runs',
    });
};

/**
 * List Workspaces
 */
export const getWorkspaces = (options?: Options<GetWorkspacesData>) => {
    return (options?.client ?? client).get<
    GetWorkspacesResponse,
    GetWorkspacesError
  >({
      ...options,
      url: '/workspaces',
  });
};

/**
 * Create a Workspace
 * Workspaces represent a unit of infrastructure managed by terraform.
 *
 * To create a workspace you must pass `name` attribute and `environment` relationship.
 *
 * A workspace might be linked to a VCS repository, so that any git push will trigger a terraform Run
 * in the workspace.
 *
 */
export const createWorkspace = (options?: Options<CreateWorkspaceData>) => {
    return (options?.client ?? client).post<
    CreateWorkspaceResponse,
    CreateWorkspaceError
  >({
      ...options,
      url: '/workspaces',
  });
};
